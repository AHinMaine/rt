#!/opt/local/bin/perl
# BEGIN BPS TAGGED BLOCK {{{
# 
# COPYRIGHT:
#  
# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
#                                          <jesse@bestpractical.com>
# 
# (Except where explicitly superseded by other copyright notices)
# 
# 
# LICENSE:
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/copyleft/gpl.html.
# 
# 
# CONTRIBUTION SUBMISSION POLICY:
# 
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
# 
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
# 
# END BPS TAGGED BLOCK }}}
use strict;
use Carp;

use lib ("/home/jesse/svk/3.999-DANGEROUS/local/lib", "/home/jesse/svk/3.999-DANGEROUS/lib");

package RT;

use Getopt::Long;

use RT::Interface::CLI qw(CleanEnv GetCurrentUser GetMessageContent loc);
use RT::Model::TicketCollection;
use RT::Model::Template;

#Clean out all the nasties from the environment
CleanEnv();

# Load the config file
RT::load_config();

#Connect to the database and get RT::system_user and RT::Nobody loaded
RT::Init();

#Get the current user all loaded
my $CurrentUser = GetCurrentUser();

unless ( $CurrentUser->id ) {
    print _("No RT user found. Please consult your RT administrator.\n");
    exit(1);
}

my ( $search, $condition, $action, $search_arg, $condition_arg, $action_arg,
     $template_id, $transaction, $transaction_type, $help, $verbose );
GetOptions( "search=s"           => \$search,
            "search-arg=s"       => \$search_arg,
            "condition=s"        => \$condition,
            "condition-arg=s"    => \$condition_arg,
            "action-arg=s"       => \$action_arg,
            "action=s"           => \$action,
            "template-id=s"      => \$template_id,
            "transaction=s"      => \$transaction,
            "transaction-type=s" => \$transaction_type,
            "help"               => \$help,
            "verbose|v"          => \$verbose );

help() if $help or not $search or not $action;

$transaction ||= 'first';
unless ( $transaction =~ /^(first|last)$/i ) {
    print STDERR _("--transaction argument could be only 'first' or 'last'");
    exit 1;
}
$transaction = lc($transaction) eq 'first'? 'ASC': 'DESC';

# We _must_ have a search object
load_module($search);
load_module($action)    if ($action);
load_module($condition) if ($condition);

# load template if specified
my $template_obj;
if ($template_id) {
    $template_obj = RT::Model::Template->new($CurrentUser);
    $template_obj->load($template_id);
}
my $void_scrip = RT::Model::Scrip->new( $CurrentUser );
my $void_scrip_action = RT::Model::ScripAction->new( $CurrentUser );

#At the appointed time:

#find a bunch of tickets
my $tickets = RT::Model::TicketCollection->new($CurrentUser);
my $search  = $search->new(
    TicketsObj  => $tickets,
    Argument    => $search_arg,
    CurrentUser => $CurrentUser
);

$search->prepare();

# TicketsFound is an RT::Model::TicketCollection object
my $tickets = $search->TicketsObj;

#for each ticket we've found
while ( my $ticket = $tickets->next() ) {
    print $ticket->id() . ": " if ($verbose);

    my $transaction = get_transaction($ticket);
    print _("Using transaction #%1...", $transaction->id)
        if $verbose && $transaction;

    # perform some more advanced check
    if ($condition) {
        my $condition_obj = $condition->new(
            TransactionObj => $transaction,
            TicketObj      => $ticket,
            ScripObj       => $void_scrip,
            TemplateObj    => $template_obj,
            Argument       => $condition_arg,
            CurrentUser    => $CurrentUser,
        );

        # if the condition doesn't apply, get out of here

        next unless ( $condition_obj->IsApplicable );
        print _("Condition matches...") if ($verbose);
    }

    #prepare our action
    my $action_obj = $action->new(
        TicketObj      => $ticket,
        TransactionObj => $transaction,
        TemplateObj    => $template_obj,
        Argument       => $action_arg,
        ScripObj       => $void_scrip,
        ScripActionObj => $void_scrip_action,
        CurrentUser    => $CurrentUser,
    );

    #if our preparation, move onto the next ticket
    next unless ( $action_obj->prepare );
    print _("Action prepared...") if ($verbose);

    #commit our action.
    next unless ( $action_obj->commit );
    print _("Action committed.\n") if ($verbose);
}

=head2 get_transaction

Takes ticket and returns its transaction acording to command
line arguments C<--transaction> and <--transaction-type>.

=cut

sub get_transaction {
    my $ticket = shift;
    my $txns = $ticket->Transactions;
    $txns->order_by(
        { column => 'Created', order => $transaction },
        { column => 'id', order => $transaction },
    );
    $txns->limit( column => 'Type', value => $transaction_type )
        if $transaction_type;
    $txns->rows_per_page(1);
    return $txns->first;
}

# {{{ load_module 

=head2 load_module

Loads a perl module, dying nicely if it can't find it.

=cut

sub load_module {
    my $modname = shift;
    eval "require $modname";
    if ($@) {
        die _( "Failed to load module %1. (%2)", $modname, $@ );
    }

}

# }}}

# {{{ loc 

=head2 loc LIST

Localize this string, with the current user's currentuser object

=cut

sub loc {
    $CurrentUser->_(@_);
}

# }}}

sub help {

    print _( "%1 is a tool to act on tickets from an external scheduling tool, such as cron.", $0 )
      . "\n";
    print _("It takes several arguments:") . "\n\n";

    print "	"
      . _( "%1 - Specify the search module you want to use", "--search" )
      . "\n";
    print "	"
      . _( "%1 - An argument to pass to %2", "--search-argument", "--search" )
      . "\n";

    print "	"
      . _( "%1 - Specify the condition module you want to use", "--condition" )
      . "\n";
    print "	"
      . _( "%1 - An argument to pass to %2", "--condition-argument", "--condition" )
      . "\n";
    print "	"
      . _( "%1 - Specify the action module you want to use", "--action" )
      . "\n";
    print "	"
      . _( "%1 - An argument to pass to %2", "--action-argument", "--action" )
      . "\n";
    print "	"
      . _( "%1 - Specify id of the template you want to use", "--template-id" )
      . "\n";
    print "	"
      . _( "%1 - Specify if you want to use either 'first' or 'last' transaction", "--transaction" )
      . "\n";
    print "	"
      . _( "%1 - Specify the type of a transaction you want to use", "--transaction-type" )
      . "\n";
    print "	"
      . _( "%1 - Output status updates to STDOUT", "--verbose" ) . "\n";
    print "\n";
    print "\n";
    print _("Security:")."\n";
    print _("This tool allows the user to run arbitrary perl modules from within RT.")." ". 
        _("If this tool were setgid, a hostile local user could use this tool to gain administrative access to RT.")." ".
        _("It is incredibly important that nonprivileged users not be allowed to run this tool."). " " . 
        _("It is suggested that you create a non-privileged unix user with the correct group membership and RT access to run this tool.")."\n";
    print "\n";
    print _("Example:");
    print "\n";
    print " "
      . _( "The following command will find all active tickets in the queue 'general' and set their priority to 99 if they haven't been touched in 4 hours:"
      )
      . "\n\n";

    print " bin/rt-crontool \\\n";
    print "  --search RT::Search::ActiveTicketsInQueue  --search-arg general \\\n";
    print "  --condition RT::Condition::UntouchedInHours --condition-arg 4 \\\n";
    print "  --action RT::ScripAction::SetPriority --action-arg 99 \\\n";
    print "  --verbose\n";

    print "\n";
    print _("Escalate tickets"). "\n";
    print " bin/rt-crontool \\\n";
    print "  --search RT::Search::ActiveTicketsInQueue  --search-arg general \\\n";
    print "  --action RT::ScripAction::EscalatePriority\n";
 
 
 



    exit(0);
}
