%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/copyleft/gpl.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
%# REST/1.0/Forms/ticket/history
%#
<%ARGS>
$id
$args => undef
$format => undef
$fields => undef
</%ARGS>
<%INIT>
my $ticket = RT::Model::Ticket->new();
my ($c, $o, $k, $e) = ("", [], {}, "");

$ticket->load($id);
unless ($ticket->id) {
    return [ "# Ticket $id does not exist.", [], {}, 1 ];
}

my $trans = $ticket->transactions();
my $total = $trans->count();

if ( $args ) {
     chomp $args;
}
else {
    $args = '';
}
        
my @arglist = split('/', $args);
my ($type, $tid);

if ( defined $arglist[0] && $arglist[0] eq 'type') {
    $type = $arglist[1];
} elsif ( defined $arglist[0] && $arglist[0] eq 'id') {
    $tid = $arglist[1];
} else {
    $type = $args;
}

if ($type) {
    # Create, Set, Status, Correspond, comment, Give, Steal, Take, Told
    # CustomField, add_link, DeleteLink, AddWatcher, del_watcher
    if ($args =~ /^links?$/) {
        $trans->limit(column => 'type', operator => 'LIKE', value => '%Link');
    }
    elsif ($args =~ /^watchers?$/) {
        $trans->limit(column => 'type', operator => 'LIKE', value => '%Watcher');
    }
    else {
        $trans->limit(column => 'type', operator => '=', value => $type);
    }
} elsif ($tid) {
    $trans->limit(column => 'id', operator => '=', value => $tid);
}

if ($tid) {
    my @data;
    my $t = RT::Model::Transaction->new();
    
    # this paragraph limits the transaction ID query to transactions on this ticket. 
    # Otherwise you can query any transaction from any ticket, which makes no sense.
    my $Transactions = $ticket->transactions;
    my $tok=0;
    while (my $T = $Transactions->next()) {
    	$tok=1 if ($T->id == $tid)
    }
    if ($tok) {
    	$t->load($tid);
    } else {
    	return [ "# Transaction $tid is not related to Ticket $id", [], {}, 1 ];
    }

    push @data, [ id    => $t->id   ];
    push @data, [ Ticket    => $t->ticket   ]
	if (!%$fields || exists $fields->{lc 'Ticket'});
    push @data, [ time_taken    => $t->time_taken   ]
	if (!%$fields || exists $fields->{lc 'time_taken'});
    push @data, [ type    => $t->type   ]
	if (!%$fields || exists $fields->{lc 'type'});
    push @data, [ Field    => $t->field   ]
	if (!%$fields || exists $fields->{lc 'Field'});
    push @data, [ old_value    => $t->old_value   ]
	if (!%$fields || exists $fields->{lc 'old_value'});
    push @data, [ new_value    => $t->new_value   ]
	if (!%$fields || exists $fields->{lc 'new_value'});
    push @data, [ Data    => $t->Data   ]
	if (!%$fields || exists $fields->{lc 'Data'});
    push @data, [ Description    => $t->description   ]
	if (!%$fields || exists $fields->{lc 'Description'});
    push @data, [ Content    => $t->content   ]
	if (!%$fields || exists $fields->{lc 'Content'});


    if (!%$fields || exists $fields->{lc 'Content'}) {    
	my $creator = RT::Model::User->new();
	$creator->load($t->Creator);
	push @data, [ Creator    => $creator->name   ];
    }
    push @data, [ Created    => $t->Created   ]
	if (!%$fields || exists $fields->{lc 'Created'});

    if (!%$fields || exists $fields->{lc 'Attachments'}) {
	my $attachlist;
	my $attachments = $t->attachments;
	while (my $a = $attachments->next) {
	    my $size = length($a->Content);
	    if ($size > 1024) { $size  = int($size/102.4)/10 . "k" }
	    else              { $size .= "b" }
	    $attachlist .= "\n" . $a->id.": ".($a->filename || "untitled")." (".$size.")";
	}
	
	push @data, [Attachments => $attachlist];
    }

    my %k = map {@$_} @data;
    $o = [ map {$_->[0]} @data ];
    $k = \%k;

} else {
    my (@data, $tids);
    $format ||= "s";
    $format = "l" if (%$fields);

    while (my $t = $trans->next) {
	my $tid = $t->id;

	if ($format eq "l") {
	    $tids .= "," if $tids;
	    $tids .= $tid;
	} else {
	    push @$o, $tid;
	    $k->{$tid} = $t->description;
	}
    }

    if ($format eq "l") {
	my @tid;
	push @tid, "ticket/$id/history/id/$tids";
	my $fieldstring;
	foreach my $key (keys %$fields) {
	    $fieldstring .= "," if $fieldstring;
	    $fieldstring .= $key;
	}
	my ($content, $forms);
	$m->subexec("/REST/1.0/show", 
		    id => \@tid, 
		    format => $format,
                    fields => $fieldstring);
	return [ $c, $o, $k, $e ];
    }
}

if (!$c) {
    my $sub = $trans->count();
    $c = "# $sub/$total ($args/total)";
}

return [ $c, $o, $k, $e ];

</%INIT>
