%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/copyleft/gpl.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
%# REST/1.0/Forms/user/default
%#
<%ARGS>
$id
$format => 's'
$changes => {}
</%ARGS>
<%perl>
my @comments;
my ($c, $o, $k, $e) = ("", [], {}, 0);
my %data = %$changes;
my $user = RT::Model::User->new() ;
my @fields = qw(real_name nickname Gecos organization Address1 Address2 City
                State Zip Country HomePhone WorkPhone MobilePhone PagerPhone
                freeform_contact_info comments Signature Lang email_encoding
                web_encoding ExternalContactInfoId ContactInfoSystem
                ExternalAuthId auth_system);
my %fields = map { lc $_ => $_ } @fields;

if ($id ne 'new') {
    $user->load($id);
    if (!$user->id) {
        return [ "# User $id does not exist.", [], {}, 1 ];
    }
}
else {
    if ( keys %data == 0) {
        return [
            "# Required: name, email",
            [ qw(id name email organization password comments) ],
            {
                id => "user/new",
                name => "",
                email => "",
                organization => "",
                password => "",
                comments => ""
            },
            0
        ];
    }
    else {
        my %v;
        my %create = %fields;
        $create{name}         = "name";
        $create{password}     = "password";
        $create{email} = "email";
        $create{contactinfo}  = "freeform_contact_info";
        # Do any fields need to be excluded here?

        foreach my $k (keys %data) {
            if (exists $create{lc $k}) {
                $v{$create{lc $k}} = delete $data{$k};
            }
        }

        $user->create(%v);
        unless ($user->id) {
            return [ "# Could not create user.", [], {}, 1 ];
        }

        $id = $user->id;
        delete $data{id};
        push(@comments, "# User $id Created.");
        goto DONE if keys %data == 0;
    }
}

if (keys %data == 0) {
    my @data;

    push @data, [ id => "user/".$user->id ];
    push @data, [ name => $user->name ];
    push @data, [ password => '********' ];
    push @data, [ email => $user->email ];

    foreach my $key (@fields) {
        my $val = $user->$key;

        if ( (defined ($format) && $format eq 'l') || (defined $val && $val ne '')) {
            $key = "ContactInfo" if $key eq 'freeform_contact_info';
            push @data, [ $key => $val ];
        }
    }

    my %k = map {@$_} @data;
    $o = [ map {$_->[0]} @data ];
    $k = \%k;
}
else {
    my ($get, $set, $key, $val, $n, $s);

    foreach $key (keys %data) {
        $val = $data{$key};
        $key = lc $key;
        $n = 1;

        if ($key eq 'name' || $key eq 'email' ||
            $key eq 'contactinfo' || exists $fields{$key})
        {
            if (exists $fields{$key}) {
                $key = $fields{$key};
            }
            else {
                $key = "freeform_contact_info" if $key eq 'contactinfo';
                $key = "email" if $key eq 'email';
                $key = "name" if $key eq 'name';
            }
            $set = "set_$key";

            next if $val eq $user->$key;
            ($n, $s) = $user->$set($val);
        }
        elsif ($key eq 'password') {
            ($n, $s) = $user->set_password($val) unless $val =~ /^\**$/;
        }
        elsif ($key ne 'id') {
            $n = 0;
            $s = "Unknown field.";
        }

    SET:
        if ($n == 0) {
            $e = 1;
            push @comments, "# $key: $s";
            unless (@$o) {
                my %o = keys %$changes;
                delete @o{"id", @fields};
                @$o = ("id", @fields, keys %o);
                $k = $changes;
            }
        }
    }

    push(@comments, "# User $id updated.") unless $n == 0;
}

DONE:
$c ||= join("\n", @comments) if @comments;
return [ $c, $o, $k, $e ];
</%perl>
