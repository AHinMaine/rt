<table>
<td><% _('Sign')%></td>
<td><& /Widgets/Form/Boolean:InputOnly, name => 'Sign', current_value => $self->{'Sign'} &>
using <& SelectKeyForSigning, User => Jifty->web->current_user->user_object &>
</td>
<td><% _('Encrypt')%></td>
<td><& /Widgets/Form/Boolean:InputOnly, name => 'Encrypt', current_value => $self->{'Encrypt'} &></td>
</table>
<%ARGS>
$self => undef,
</%ARGS>
<%INIT>
return unless $self;
</%INIT>

<%METHOD new>
<%ARGS>
$Arguments => {}
</%ARGS>
<%INIT>
return undef unless RT->Config->Get('GnuPG')->{'Enable'};

require RT::Crypt::GnuPG;
return { %$Arguments };
</%INIT>
</%METHOD>

<%METHOD ShowIssues>
<%ARGS>
$self => undef,
</%ARGS>
<%INIT>
return unless $self;

return $m->comp( '/Elements/GnuPGKeyIssues',
    Issues => $self->{'GnuPGRecipientsKeyIssues'} || [],
    SignAddresses => $self->{'GnuPGCanNotSignAs'} || [],
);
</%INIT>
</%METHOD>


<%METHOD Process>
<%ARGS>
$self => undef
$QueueObj => undef
$TicketObj => undef
</%ARGS>
<%INIT>
return unless $self;

$QueueObj ||= $TicketObj->QueueObj if $TicketObj;

foreach ( qw(Sign Encrypt) ) {
    $self->{ $_ } = $m->comp( '/Widgets/Form/Boolean:Process',
        name => $_,
        DefaultValue => $QueueObj->$_,
        Arguments => $self,
    );
}
</%INIT>
</%METHOD>

<%METHOD Check>
<%ARGS>
$self      => undef
$Operation => 'Update'
$TicketObj => undef
$QueueObj  => undef
</%ARGS>
<%INIT>
return 1 unless $self;

my $checks_failure = 0;

if ( $self->{'Sign'} ) {
    $QueueObj ||= $TicketObj->QueueObj
        if $TicketObj;

    my $address = $self->{'SignUsing'};
    $address ||= $self->{'UpdateType'} eq "private"
        ? ( $QueueObj->commentAddress || RT->Config->Get('commentAddress') )
        : ( $QueueObj->correspond_address || RT->Config->Get('correspond_address') );

    unless ( RT::Crypt::GnuPG::DrySign( $address ) ) {
        push @{ $self->{'GnuPGCanNotSignAs'} ||= [] }, $address;
        $checks_failure = 1;
    } else {
        RT::Crypt::GnuPG::UseKeyForSigning( $self->{'SignUsing'} )
            if $self->{'SignUsing'};
    }
}

if ( $self->{'Encrypt'} ) {

    my @recipients;

    if ( $Operation eq 'Update' ) {
        # skip any email addresses that we won't be sending mail to
        my %squelch = $m->comp(
            '/Ticket/Elements/PreviewScrips:SquelchRecipients',
            %$self,
            TicketObj => $TicketObj
        );

        @recipients = $m->comp(
            '/Ticket/Elements/PreviewScrips:GetRecipients',
            %$self, TicketObj => $TicketObj
        );
    }
    elsif ( $Operation eq 'Create' ) {
        @recipients = $m->comp(
            '/Ticket/Elements/PreviewScrips:GetRecipientsOnCreate',
            %$self,
        );
    }
    else {
        $RT::Logger->crit('Incorrect operation: '. $Operation );
    }

    my %seen;
    @recipients = grep !$seen{ lc $_ }++, @recipients;

    RT::Crypt::GnuPG::UseKeyForEncryption(
        map { (/^UseKey-(.*)$/)[0] => $self->{ $_ } }
        grep $self->{ $_ } && /^UseKey-/,
        keys %$self
    );

    my ($status, @issues) = RT::Crypt::GnuPG::CheckRecipients( @recipients );
    push @{ $self->{'GnuPGRecipientsKeyIssues'} ||= [] }, @issues;
    $checks_failure = 1 unless $status;
}

return $checks_failure ? 0 : 1;
</%INIT>
</%METHOD>
