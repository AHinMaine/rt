%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/copyleft/gpl.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<%ARGS>
$name => undef
$Attr => undef
</%ARGS>


<%ONCE>
our ( $TICKET_COLUMN_MAP );

my $LinkCallback = sub  {
    my $method = shift;

    my $mode            = $RT::Model::Ticket::LINKTYPEMAP{$method}{Mode};
    my $type            = $RT::Model::Ticket::LINKTYPEMAP{$method}{Type};
    my $other_mode      = ($mode eq "Target" ? "Base" : "Target");
    my $mode_uri        = $mode.'URI';
    my $local_type      = 'Local'.$mode;

    return sub  {
        map {
            \'<a href="',
            $_->$mode_uri->resolver->href,
            \'">',
            ( $_->$mode_uri->is_local ? $_->$local_type : $_->$mode ),
            \'</a><br />',
        } @{ $_[0]->Links($other_mode,$type)->items_array_ref }
    }
};

$TICKET_COLUMN_MAP = {
    Queuename => {
        attribute => 'Queue',
        title     => 'Queue',
        value     => sub  { return $_[0]->queue_obj->name }
    },
    Ownername => {
        title     => 'Owner',
        attribute => 'Owner',
        value     => sub  { return $_[0]->owner_obj->name }
    },
    Status => {
        attribute => 'Status',
        value     => sub  { return _($_[0]->Status) }
    },
    Subject => {
        attribute => 'Subject',
        value => sub  { return $_[0]->subject || "(" . _('No subject') . ")" }
    },
    ExtendedStatus => {
        title     => 'Status',
        attribute => 'Status',
        value     => sub  {
            my $Ticket = shift;

            if ( $Ticket->has_unresolved_dependencies ) {
                if (   $Ticket->has_unresolved_dependencies( Type => 'approval' )
                    or $Ticket->has_unresolved_dependencies( Type => 'code' ) )
                {
                    return \'<em>', _('(pending approval)'), \'</em>';
                }
                else {
                    return \'<em>', _('(pending other Collection)'), \'</em>';
                }
            }
            else {
                return _( $Ticket->Status );
            }

          }
    },
    Priority => {
        attribute => 'Priority',
        value     => sub  { return $_[0]->Priority }
    },
    initial_priority => {
        attribute => 'initial_priority',
        name => 'Initial Priority',
        value     => sub  { return $_[0]->initial_priority }
    },
    final_priority => {
        attribute => 'final_priority',
        name => 'Final Priority',
        value     => sub  { return $_[0]->final_priority }
    },
    EffectiveId => {
        attribute => 'EffectiveId',
        value     => sub  { return $_[0]->EffectiveId }
    },
    Type => {
        attribute => 'Type',
        value     => sub  { return $_[0]->type }
    },
    time_worked => {
        attribute => 'time_worked',
        title => 'Time Worked',
        value     => sub  { return $_[0]->time_worked }
    },
    time_left => {
        attribute => 'time_left',
        title     => 'Time Left',
        value     => sub  { return $_[0]->time_left }
    },
    time_estimated => {
        attribute => 'time_estimated',
        title => 'Time Estimated',
        value     => sub  { return $_[0]->time_estimated }
    },
    Requestors => {
        attribute => 'Requestor.email',
        value => sub  { return $_[0]->requestors->member_emails_as_string }
    },
    Cc => {
        attribute => 'Cc.email',
        value => sub  { return $_[0]->cc->member_emails_as_string }
    },
    AdminCc => {
        attribute => 'AdminCc.email',
        value => sub  { return $_[0]->admin_cc->member_emails_as_string }
    },
    startsRelative => {
        title     => 'starts',
        attribute => 'starts',
        value     => sub  { return $_[0]->starts_obj->age_as_string }
    },
    StartedRelative => {
        title     => 'Started',
        attribute => 'Started',
        value     => sub  { return $_[0]->started_obj->age_as_string }
    },
    ToldRelative => {
        title     => 'Told',
        attribute => 'Told',
        value     => sub  { return $_[0]->told_obj->age_as_string }
    },
    DueRelative => {
        title     => 'Due',
        attribute => 'Due',
        value     => sub  { 
            my $date = $_[0]->due_obj;
            if ( $date && $date->unix > 0 && $date->diff < 0 ) {
                return (\'<span class="overdue">' , $date->age_as_string , \'</span>');
            } else {
                return $date->age_as_string;
            }
        }
    },
    ResolvedRelative => {
        title     => 'Resolved',
        attribute => 'Resolved',
        value     => sub  { return $_[0]->resolved_obj->age_as_string }
    },
    starts => {
        attribute => 'starts',
        value     => sub  { return $_[0]->starts_obj->as_string }
    },
    Started => {
        attribute => 'Started',
        value     => sub  { return $_[0]->started_obj->as_string }
    },
    Told => {
        attribute => 'Told',
        value     => sub  { return $_[0]->told_obj->as_string }
    },
    Due => {
        attribute => 'Due',
        value     => sub  { return $_[0]->due_obj->as_string }
    },
    Resolved => {
        attribute => 'Resolved',
        value     => sub  { return $_[0]->resolved_obj->as_string }
    },
    UpdateStatus => {
        title => _('New messages'),
        value => sub  {
            my $txn = $_[0]->seen_up_to or return $_[0]->_('No');
            return \('<a href="'. RT->config->get('WebPath') .'/Ticket/Display.html?id='
                . $_[0]->id .'#txn-'. $txn->id .'">'),
                $_[0]->_('New'), \'</a>';
        },
    },
    KeyRequestors => {
        title     => 'Requestors',
        attribute => 'Requestor.email',
        value => sub  {
            my $t = shift;
            my @requestors = $t->requestors->member_emails;
            for my $email (@requestors)
            {
                my %key = RT::Crypt::GnuPG::get_key_info($email);
                if (!defined $key{'info'}) {
                    $email .= _(" (no pubkey!)");
                }
                elsif ($key{'info'}{'TrustLevel'} == 0) {
                    $email .= _(" (untrusted!)");
                }
            }
            return join ', ', @requestors;
        }
    },
    KeyOwnername => {
        title     => 'Owner',
        attribute => 'Owner',
        value     => sub  {
            my $t = shift;
            my $name = $t->owner_obj->name;
            my %key = RT::Crypt::GnuPG::get_key_info($t->owner_obj->email);
            if (!defined $key{'info'}) {
                $name .= _(" (no pubkey!)");
            }
            elsif ($key{'info'}{'TrustLevel'} == 0) {
                $name .= _(" (untrusted!)");
            }

            return $name;
        }
    },

    # Everything from LINKTYPEMAP
    (map {
        $_ => { value => $LinkCallback->( $_ ) }
    } keys %RT::Model::Ticket::LINKTYPEMAP),

    (map {
        my $value = RT->config->get($_);
        $_ => { value => sub  { return \$value } };
    
    } qw(WebPath WebBaseURL WebURL)),

    '_CLASS' => {
        value => sub  { return $_[1] % 2 ? 'oddline' : 'evenline' }
    },
    '_CHECKBOX' => {
        attribute => 'checkbox',
        title => _('Update'),
        align     => 'right',
        value     => sub  { return \('<input type="checkbox" class="checkbox" name="UpdateTicket'.$_[0]->id.'" value="1" checked />') }
    },

    CustomField => {
        attribute => undef,
        title     => sub  { return pop @_ },
        value     => sub  {
            # Display custom field contents, separated by newlines.
            # For Image custom fields we also show a thumbnail here.

            my $values = $_[0]->custom_field_values( $_[-1] );
            my @values = map {
                (
                    ($_->custom_field_obj->type eq 'Image')
                        ? \($m->scomp( '/Elements/ShowCustomFieldImage', Object => $_ ))
                        : $_->content
                ),
                \'<br />',
            } @{ $values->items_array_ref };
            pop @values; # Remove that last <br />
            return @values;
        },
    },
};

$TICKET_COLUMN_MAP->{'CF'} = $TICKET_COLUMN_MAP->{'CustomField'};

# if no GPG support, then KeyOwnername and KeyRequestors fall back to the regular
# versions
if (RT->config->get('GnuPG')->{'Enable'}) {
    require RT::Crypt::GnuPG;
}
else {
    $TICKET_COLUMN_MAP->{KeyOwnername} = $TICKET_COLUMN_MAP->{Ownername};
    $TICKET_COLUMN_MAP->{KeyRequestors} = $TICKET_COLUMN_MAP->{Requestors};
}
</%ONCE>
<%init>
$m->callback( COLUMN_MAP => $TICKET_COLUMN_MAP, Callbackname => 'Once', CallbackOnce => 1 );
$m->callback( COLUMN_MAP => $TICKET_COLUMN_MAP, Callbackname => 'ColumnMap' );
return get_column_map_entry( Map => $TICKET_COLUMN_MAP, name => $name, Attribute => $Attr );
</%init>
