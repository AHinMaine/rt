%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/copyleft/gpl.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<%PERL>
# Find all the attachments which have parent $Parent
# For each of these attachments
foreach my $message ( grep $_->__value('Parent') == $Parent, @$Attachments ) {
    $m->comp( 'show_message_headers',
              Message        => $message,
              display_headers => \@display_headers,
            );

    my $size = $message->content_length;
    if ( $size ) {
</%PERL>
<div class="downloadattachment">
<a href="<% $AttachPath %>/<% $Transaction->id %>/<% $message->id %>/<% ($message->filename ||'')| u%>"><&|/l&>Download</&> <% $message->filename || _('(untitled)') %></a>
% if ( $downloadable_headers && !$message->filename && $message->content_type =~ /text/  ) {
 / <a href="<% $AttachPath %>/WithHeaders/<% $message->id %>"><% _('with headers') %></a>
% }
<br/>
<span class="downloadcontenttype"><% $message->content_type %> <% $size_to_str->( $size ) %></span>
</div>
%   }

<div class="messagebody">
<%PERL>
# {{{ if it has a content-disposition: attachment, don't show inline
unless ( ($message->get_header('Content-Disposition')||"") =~ /attachment/i ) {

    my $content;

    # If it's text
    if (   $message->content_type =~ m{^(text|message)}i
        && !( $message->filename && RT->config->get('SuppressInlineTextFiles', Jifty->web->current_user ) )
        && (   !RT->config->get( 'MaxInlineBody', Jifty->web->current_user )
            || $size <= RT->config->get('MaxInlineBody', Jifty->web->current_user ) ) )
    {

        if (

            # it's a toplevel object
            !$ParentObj

            # or its parent isn't a multipart alternative
            || ( $ParentObj->content_type !~ m{^multipart/alternative$}i )

            # or it's of our prefered alterative type
            || (
                (
                    RT->config->get('PreferRichText')
                    && ( $message->content_type =~ m{^text/(?:html|enriched)$} )
                )
                || ( !RT->config->get('PreferRichText')
                    && ( $message->content_type !~ m{^text/(?:html|enriched)$} )
                )
            )
          )
        {

            if ( $AttachmentContent->{ $message->id } ) {
                $content = $AttachmentContent->{ $message->id }->content;
            }
            else {
                $content = $message->content;
            }

            # if it's a text/html clean the body and show it
            if ( $message->content_type =~ m{^text/(?:html|enriched)$}i ) {
                $m->out( $m->comp( '/Elements/ScrubHTML', Content => $content ) );
            }

            # if it's a text/plain show the body
            elsif ( $message->content_type =~ m{^(text|message)}i ) {

                eval { require Text::Quoted;  $content = Text::Quoted::extract($content); };
                if ($@) { Jifty->log->warn( "Text::Quoted failed: $@" ) }

                $m->comp(
                    'ShowMessageStanza',
                    Depth       => 0,
                    Message     => $content,
                    Transaction => $Transaction
                );
            }
        }
    }

    # if it's an image, show it as an image
    elsif ( RT->config->get('ShowTransactionImages') and  $message->content_type =~ /^image\//i ) {
        $m->out('<img src="'
              . $AttachPath . '/'
              . $Transaction->id . '/'
              . $message->id
              . '/" />' );
    }
    elsif ( $message->content_length > 0 ) {
        $m->out(
            _( 'Message body not shown because it is too large or is not plain text.' )
        );
    }
}

# }}}

$m->comp(
    $m->current_comp,
    %ARGS,
    Parent    => $message->id,
    ParentObj => $message
);
</%perl>
</div>
<%perl>
}
</%PERL>
<%ARGS>
$Ticket => undef
$Transaction => undef
$show_headers => 0
$Collapsed => undef
$downloadable_headers => 1
$ShowTitleBarCommands => 1
$RowNum => 1
$AttachPath => RT->config->get('WebPath')."/Ticket/Attachment"
$UpdatePath => RT->config->get('WebPath')."/Ticket/Update.html"
$EmailRecordPath => RT->config->get('WebPath')."/Ticket/ShowEmailRecord.html"
$Attachments => undef
$AttachmentContent => {}
$ShowBody => 1
$Parent => 0
$ParentObj => undef
</%ARGS>
<%INIT>
my @display_headers=qw(_all);
if ( $Transaction->type =~ /EmailRecord$/ ) {
    @display_headers = qw(To Cc Bcc);
}

# If the transaction has anything attached to it at all
elsif (!$show_headers)  {
    @display_headers = qw(To From RT-Send-Cc Cc Bcc Date subject);
}

my $size_to_str = sub  {
    my $size = shift;
    # show a download link
    if ( $size > 1024*1024 ) {
        $size = _( "%1b", int( $size / 1024 / 102.4 ) / 10 );
    }
    elsif ( $size > 1024 ) {
        $size = _( "%1k", int( $size / 102.4 ) / 10 );
    }
    else {
        $size = _( "%1b", $size );
    }
    return $size;
};
</%INIT>
