%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%#  
%# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/copyleft/gpl.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<%args>
$ticket_obj => undef

</%args>
<%init>
my %squelch = $m->comp('SELF:SquelchRecipients', %ARGS);
my $Object = $squelch{'Object'};
my @non_recipients = @{ $squelch{'emails'} };

</%init>
<h2><&|/l&>This message will be sent to...</&></h2>

% if ( $Object ) {
<i><&|/l&>(Check boxes to disable notifications to the listed recipients)</&></i><br />

% foreach my $scrip (@{$Object->Scrips->prepared}) {
% next unless $scrip->ActionObj->Action->isa('RT::ScripAction::SendEmail');
<b><% $scrip->Description || _('Scrip #%1',$scrip->id) %></b><br />
<&|/l, _($scrip->ConditionObj->name), loc($scrip->ActionObj->name), loc($scrip->template_obj->name)&>%1 %2 with template %3</&>
<br />
%foreach my $type qw(To Cc Bcc) {
%my @addresses =  $scrip->ActionObj->Action->$type();
<ul>
%foreach my $addr (@addresses) {
<li> <b><%_($type)%></b>: <input type="checkbox" class="checkbox" name="Ticket-<%$ticket_obj->id%>-SquelchMailTo" value="<%$addr->address%>" /> <%$addr->address%>
% }
</ul>
% }
% if (RT->Config->Get('PreviewScripMessages')) {
<textarea cols="80" rows="5">
<%$scrip->ActionObj->template_obj->MIMEObj->as_string%>
</textarea>
% }
% }
% }
<br />

<h2><&|/l&>Messages about this ticket will not be sent to...</&></h2>
<i><&|/l&>(Check boxes to enable notifications to the listed recipients)</&></i>
<br />
<ul>
% foreach my $recipient (@non_recipients) {
<li><input type="checkbox" class="checkbox" name="Ticket-<%$ticket_obj->id%>-UnsquelchMailTo" value="<%$recipient->Content%>" />
<% $recipient->Content %>
% }
</ul>
<& /Elements/Submit, Value => 'UpdatePreview', Label => _('Save changes')&>

<%METHOD SquelchRecipients>
<%ARGS>
$ticket_obj => undef
</%ARGS>
<%INIT>
my $arg = 'Ticket-'.$ticket_obj->id.'-SquelchMailTo';
my @squelchto = ref($ARGS{$arg}) eq 'ARRAY' ? @{$ARGS{$arg}} : ($ARGS{$arg});

foreach my $address (@squelchto) {
        $ticket_obj->SquelchMailTo($address) if ($address);
}


$arg = 'Ticket-'.$ticket_obj->id.'-UnsquelchMailTo';
my @unsquelchto = ref($ARGS{$arg}) eq 'ARRAY' ? @{$ARGS{$arg}} : ($ARGS{$arg});

foreach my $address (@unsquelchto) {
        $ticket_obj->UnsquelchMailTo($address) if ($address);
}


my $action;

if (($ARGS{'UpdateType'} &&  $ARGS{'UpdateType'} eq 'response' ) || ($ARGS{'Action'} && $ARGS{'Action'} eq 'Respond' )) {
    $action = 'correspond';
}
else {
    $action = 'comment';
}

my $Message = MakeMIMEEntity(
    Subject => $ARGS{'UpdateSubject'},
    Body    => $ARGS{'UpdateContent'},
);

my ( $Transaction, $Description, $Object ) = $ticket_obj->$action(
    CcMessageTo  => $ARGS{'UpdateCc'},
    BccMessageTo => $ARGS{'UpdateBcc'},
    MIMEObj      => $Message,
    TimeTaken    => $ARGS{'UpdateTimeWorked'},
    DryRun       => 1
);
unless ( $Transaction ) {
    Jifty->log->error("Coulfn't fire '$action' action: $Description");
}


return (Object => $Object, emails => [$ticket_obj->SquelchMailTo]);
</%INIT>
</%METHOD>

<%METHOD GetRecipients>
<%ARGS>
$ticket_obj
</%ARGS>
<%INIT>
my $action;
if ( ( $ARGS{'UpdateType'} &&  $ARGS{'UpdateType'} eq 'response' )
    || ( $ARGS{'Action'} && $ARGS{'Action'} eq 'Respond' ) )
{
    $action = 'correspond';
}
else {
    $action = 'comment';
}

my $Message = MakeMIMEEntity(
    Subject => $ARGS{'UpdateSubject'},
    Body    => $ARGS{'UpdateContent'},
);

my ( $id, $msg, $txn ) = $ticket_obj->$action(
    CcMessageTo  => $ARGS{'UpdateCc'},
    BccMessageTo => $ARGS{'UpdateBcc'},
    MIMEObj      => $Message,
    TimeTaken    => $ARGS{'UpdateTimeWorked'},
    DryRun       => 1
);
unless ( $id && $txn ) {
    Jifty->log->error("Couldn't fire '$action' action: $msg");
    return ();
}

my @recipients;
foreach my $scrip ( @{ $txn->Scrips->prepared } ) {
    my $action = $scrip->ActionObj->Action;
    next unless $action->isa('RT::ScripAction::SendEmail');

    foreach my $type qw(To Cc Bcc) {
        push @recipients, $action->$type();
    }
}
return @recipients;
</%INIT>
</%METHOD>

<%METHOD GetRecipientsOnCreate>
<%INIT>
my $action;
my $Message = MakeMIMEEntity(
    Subject => $ARGS{'Subject'},
    Cc => $ARGS{'Cc'},
    Body    => $ARGS{'Content'},
);

my $ticket_obj = RT::Model::Ticket->new();
my ( $id, $txn, $msg ) = $ticket_obj->create(
    Type            => $ARGS{'Type'} || 'ticket',
    Queue           => $ARGS{'Queue'},
    Owner           => $ARGS{'Owner'},
    Requestor       => $ARGS{'Requestors'},
    Cc              => $ARGS{'Cc'},
    AdminCc         => $ARGS{'AdminCc'},
    initial_priority => $ARGS{'initial_priority'},
    final_priority   => $ARGS{'final_priority'},
    time_left        => $ARGS{'time_left'},
    time_estimated   => $ARGS{'time_estimated'},
    time_worked      => $ARGS{'time_worked'},
    Subject         => $ARGS{'Subject'},
    Status          => $ARGS{'Status'},
    MIMEObj      => $Message,
    DryRun       => 1
);
unless ( $id && $txn ) {
    Jifty->log->error("Couldn't fire '$action' action: $msg");
    return ();
}

my @recipients;
foreach my $scrip ( @{ $txn->Scrips->prepared } ) {
    my $action = $scrip->ActionObj->Action;
    next unless $action->isa('RT::ScripAction::SendEmail');

    foreach my $type qw(To Cc Bcc) {
        push @recipients, $action->$type();
    }
}
return @recipients;
</%INIT>
</%METHOD>
