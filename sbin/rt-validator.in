#!@PERL@
# BEGIN BPS TAGGED BLOCK {{{
# 
# COPYRIGHT:
#  
# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
#                                          <jesse@bestpractical.com>
# 
# (Except where explicitly superseded by other copyright notices)
# 
# 
# LICENSE:
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/copyleft/gpl.html.
# 
# 
# CONTRIBUTION SUBMISSION POLICY:
# 
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
# 
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
# 
# END BPS TAGGED BLOCK }}}
=head1 name

rtx-validator - Script that allow validate rt database

=head1 SYNOPSIS

rtx-validator -o Ticket-100

=head1 DESCRIPTION

=head2 OPTIONS

=head3 -o, --object <name>-<id>

Object(class) name and object id splitted with C<-> that should be validated.
Option is case sensetive.

=head1 SEE ALSO

C<RT::Shredder>

=cut


use strict;
use Getopt::Long;

### after: use lib qw(@RT_LIB_PATH@);
use lib qw(/opt/rt3/local/lib /opt/rt3/lib);

use RT::Shredder;
use RT::Shredder::Constants;
RT::Shredder::Init();

our %opt;
parse_args();

unless( $opt{'object'} ) {
	usage();
}

my $obj = load_object( $opt{'object'} );

my $shredder = RT::Shredder->new;
$obj->validate_Relations( Shredder => $shredder );

foreach my $record( values %{ $shredder->{'Cache'} } ) {
	next unless( $record->{'State'} & INVALID );
	print STDERR $record->{'Object'}->_AsString ." is invalid\n";
	print STDERR "\t". (ref($record->{'Description'}) ?
			join( "\n\t", @{$record->{'Description'}} ) :
			$record->{'Description'})
		."\n";
}

#use Data::Dumper;
#print Dumper( $shredder );



sub usage
{
	print <<END;
	usage: $0 --object <name>-<id>

END
	exit 1;
}

sub parse_args
{
	my $tmp;
	Getopt::Long::Configure( "pass_through" );
	$tmp = undef;
	if( GetOptions( 'object=s' => \$tmp ) && $tmp ) {
		$opt{'object'} = $tmp;
	}
	return;
}

sub load_object
{
	my $desc = shift;
	my ($class, $id) = split /-/, $desc;
	$class = 'RT::'. $class;
	eval "require $class";
	die "Couldn't load '$class' module" if $@;
	my $obj = $class->new(current_user => RT->system_user );
	die "Couldn't construct new '$class' object" unless $obj;
	$obj->load( $id );
	die "Couldn't load '$class' object by id '$id'" unless $obj->id;
	die "Loaded object has different id" unless( $id eq $obj->id );
	return $obj;
}

