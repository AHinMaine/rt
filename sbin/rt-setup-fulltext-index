#!/usr/bin/env perl
# BEGIN BPS TAGGED BLOCK {{{
# 
# COPYRIGHT:
# 
# This software is Copyright (c) 1996-2008 Best Practical Solutions, LLC
#                                          <jesse@bestpractical.com>
# 
# (Except where explicitly superseded by other copyright notices)
# 
# 
# LICENSE:
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
# 
# 
# CONTRIBUTION SUBMISSION POLICY:
# 
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
# 
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
# 
# END BPS TAGGED BLOCK }}}
use strict;
use warnings;

use RT;
BEGIN {RT->init_jifty};
use RT::Interface::CLI qw{ clean_env };

use Getopt::Long;

clean_env();
RT->load_config();
RT->init();

no warnings 'once';

# Read in the options
my %opts;
GetOptions( \%opts, "help", "dryrun" );

if ($opts{'help'}) {
    require Pod::Usage;
    import Pod::Usage;
    pod2usage(-message => "RT Email Dashboards\n", -verbose => 1);
    exit 1;
}

# helper functions
sub verbose  { print _(@_), "\n" if $opts{verbose} || $opts{verbose}; 1 }
sub debug    { print _(@_), "\n" if $opts{debug}; 1 }
sub error    { Jifty->log->error(_(@_)); verbose(@_); 1 }
sub warning  { Jifty->log->warn(_(@_)); verbose(@_); 1 }

my %default = (
    table  => 'AttachmentsIndex',
    column => 'fts_index',
);


my $db_type = Jifty->config->framework('Database')->{'Driver'};
if ( $db_type eq 'mysql' ) {
    my $dbh = Jifty->handle->dbh;
    
    my $sphinx = ($dbh->selectrow_array("show variables like 'have_sphinx'"))[1];
    unless ( lc $sphinx eq 'yes' ) {
        print STDERR "Mysql server you have compiled without sphinx storage engine (sphinxse).\n";
        print STDERR "Either use system packages with sphinxse, binaries from Sphinx site
                      or compile mysql according to instructions in Sphinx's docs.\n";
        exit 1;
    }

    my $table = prompt(
        message => 'Enter name of a DB table that will be used to connect to the sphinx server',
        default => $default{'column'},
    );
    my $url = prompt(
        message => 'Enter URL of the sphinx search server, it should be sphinx://<server>:<port>/<index name>. Simple config for this sphinx instance will be generated for you.',
        default => 'sphinx://localhost:3312/rt',
    );

    my $schema = <<END;
CREATE TABLE $table (
    id     INTEGER NOT NULL,
    weight INTEGER NOT NULL,
    $default{'column'}  VARCHAR(3072) NOT NULL,
    INDEX($default{'column'})
) ENGINE=SPHINX CONNECTION="$url"
END

    print_rt_config( table => $table, column => $default{'column'} );
    insert_schema( $schema );

    require URI;
    my $urlo = URIâˆ’>new( $url );
    my $host  = $urlo->host;
    my $port  = $urlo->port;
    my $index = $urlo->path;

    my $var_path = RT->var_path;

    my %sphinx_conf = ();
    $sphinx_conf{'host'} = RT->config->get('DatabaseHost');
    $sphinx_conf{'db'}   = RT->config->get('DatabaseName');
    $sphinx_conf{'user'} = RT->config->get('DatabaseUser');
    $sphinx_conf{'pass'} = RT->config->get('DatabasePassword');

    print "Here is simple sphinx config, you can use it to index text/plain attachments in your DB."
        ." This config is not ideal. You should read Sphinx docs to get better ideas.";
    print <<END

source rt {
    type            = mysql

    sql_host        = $sphinx_conf{'host'}
    sql_db          = $sphinx_conf{'db'}
    sql_user        = $sphinx_conf{'user'}
    sql_pass        = $sphinx_conf{'pass'}

    sql_query       = \
        SELECT a.id, a.content FROM Attachments a
        JOIN Transactions txn ON a.transaction_id = txn.id AND txn.object_type = 'RT::Model::Ticket' \
        JOIN Tickets t ON txn.object_id = t.id \
        WHERE a.content_type = 'text/plain' AND t.Status != 'deleted'

    sql_query_info  = SELECT * FROM Attachments WHERE id=$id
}

index $index {
    source                  = rt
    path                    = $var_path/sphinx/index
    docinfo                 = extern
    charset_type            = utf-8
}

indexer {
    mem_limit               = 32M
}

searchd {
    port                    = $port
    log                     = $var_path/sphinx/searchd.log
    query_log               = $var_path/sphinx/query.log
    read_timeout            = 5
    max_children            = 30
    pid_file                = $var_path/sphinx/searchd.pid
    max_matches             = 1000
    seamless_rotate         = 1
    preopen_indexes         = 0
    unlink_old              = 1
}

END

}
elsif ( $db_type eq 'Pg' ) {
    my $dbh = Jifty->handle->dbh;
    
    my $table = prompt(
        message    => 'Enter name of a DB table that will be used to connect to the sphinx server',
        default => 'AttachmentsIndex',
    );

    my $schema = <<END;
CREATE TABLE $table (
    id      INTEGER NOT NULL,
    $default{'column'} tsvector
)
END

    print_rt_config( table => $table, column => $default{'column'} );

    insert_schema( $schema );

    print <<END;
Now you have to create an index on the column. You have choice
between GiST or GIN, the first is times slower to search, but
it takes less place and faster to update. Anyway, both are faster
then searches without them.

Either run:

    CREATE INDEX ${column}_idx ON $table USING gin($default{'column'});

or

    CREATE INDEX ${column}_idx ON $table USING gist($default{'column'});

END
}
else {
    die "Not yet supported"; 
}

sub prompt {
    my %args = @_;

    local $| = 1;
    print $args{'message'};
    if ( $args{'default'} ) {
        print "\n[". $args{'default'} .']: ';
    } else {
        print ":\n";
    }

    my $res = <STDIN>;
    chomp $res;
    return $args{'default'} if !$res && $args{'default'};
    return $res;
}

sub print_rt_config {
    my %args = @_;

    print <<END;

Configure your RT via site config:
set( %full_text_search,
    enable  => 1,
    indexed => 1,
    table   => '$args{'table'}',
    column  => '$args{'column'}',
);
END

}

sub insert_schema {
    my $schema = shift;
    print "Going to do the following change in the DB:\n";
    print $schema;
    return if $opts{'dryrun'};

    my $res = $dbh->do( $schema );
    unless ( $res ) {
        die "Couldn't create the table: ". $dbh->errstr;
    }
}

=head1 NAME

rt-setup-fulltext-index - Helps create indexes for full text search

=head1 SYNOPSIS

    /opt/rt3/local/sbin/rt-setup-fulltext-index

=head1 DESCRIPTION

=cut
