#!/usr/bin/env perl
# BEGIN BPS TAGGED BLOCK {{{
# 
# COPYRIGHT:
# 
# This software is Copyright (c) 1996-2008 Best Practical Solutions, LLC
#                                          <jesse@bestpractical.com>
# 
# (Except where explicitly superseded by other copyright notices)
# 
# 
# LICENSE:
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
# 
# 
# CONTRIBUTION SUBMISSION POLICY:
# 
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
# 
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
# 
# END BPS TAGGED BLOCK }}}
use strict;
use warnings;


use RT;
BEGIN { RT->init_jifty }
use RT::Interface::Web;
use RT::Interface::Web::Handler;
use RT::Dashboard;
use RT::Interface::CLI qw{ clean_env };

use Getopt::Long;
use HTML::Mason;
use HTML::RewriteAttributes::Resources;
use HTML::RewriteAttributes::Links;
use MIME::Types;
use POSIX 'tzset';

# Clean out all the nasties from the environment
clean_env();

# Load the config file
RT::load_config();

# Connect to the database and get RT->system_user and RT::nobody loaded
RT::init();

$HTML::Mason::Commands::r = RT::Dashboard::FakeRequest->new;

no warnings 'once';

# Read in the options
my %opts;
GetOptions( \%opts,
    "help", "dryrun", "verbose", "debug", "epoch=i", "all", "skip-acl"
);

if ($opts{'help'}) {
    require Pod::Usage;
    import Pod::Usage;
    pod2usage(-message => "RT Email Dashboards\n", -verbose => 1);
    exit 1;
}

# helper functions
sub verbose  { print _(@_), "\n" if $opts{verbose} || $opts{verbose}; 1 }
sub debug    { print _(@_), "\n" if $opts{debug}; 1 }
sub error    { Jifty->log->error(_(@_)); verbose(@_); 1 }
sub warning  { Jifty->log->warn(_(@_)); verbose(@_); 1 }

my $now = $opts{epoch} || time;
verbose "Using time %1", scalar localtime($now);

my $from = get_from();
debug "Sending email from %1", $from;

# look through each user for her subscriptions
my $Users = RT::Model::UserCollection->new( current_user => RT->system_user);
$Users->limit_to_privileged;

while (defined(my $user = $Users->next)) {
    if ($user->principal->disabled) {
        debug "Skipping over "
            . $user->name
            . " due to having a disabled account.";
        next;
    }

    unless (email_of($user)) {
        debug "Skipping over "
            . $user->name
            . " due to lack of EmailAddress.";
        next;
    }

    my ($hour, $dow, $dom) = hour_dow_dom_in($user->time_zone || RT->config->get('time_zone'));
    $hour .= ':00';
    debug "Checking %1's subscriptions: hour %2, dow %3, dom %4",
          $user->name, $hour, $dow, $dom;

    my $currentuser = RT::CurrentUser->new( name => $user->name );

    # look through this user's subscriptions, are any supposed to be generated
    # right now?
    for my $subscription ($user->attributes->named('subscription')) {

        if (!$opts{all}) {
            debug "Checking against subscription with frequency %1, hour %2, dow %3, dom %4", $subscription->sub_value('Frequency'), $subscription->sub_value('hour'), $subscription->sub_value('Dow'), $subscription->sub_value('dom');

            next if $subscription->sub_value('frequency') eq 'never';

            # correct hour?
            next if $subscription->sub_value('hour') ne $hour;

            # if weekly, correct day of week?
            if ($subscription->sub_value('frequency') eq 'weekly') {
                next if $subscription->sub_value('dow') ne $dow;
                my $counter = $subscription->sub_value('counter') || 0;
                my $fow       = $subscription->sub_value('Fow') || 1;
                if ( $counter % $fow ) {
                    $subscription->set_sub_values( counter => $counter+1 )
                      unless $opts{'dryrun'};
                    next;
                }
            }

            # if monthly, correct day of month?
            elsif ($subscription->sub_value('frequency') eq 'monthly') {
                next if $subscription->sub_value('dom') != $dom;
            }
        }

        my $email = $subscription->sub_value('recipient')
                 || $user->email;

        eval { send_dashboard($currentuser, $email, $subscription) };
        if ( $@ ) {
            error 'Caught exception: ' . $@;
        }
        else {
            $subscription->set_sub_values(
                counter => $subscription->sub_value('counter') + 1 )
              unless $opts{'dryrun'};
        }
    }
}

sub send_dashboard {
    my ($currentuser, $email, $subscription) = @_;
    

    my $rows = $subscription->sub_value('rows');

    my $dashboard = RT::Dashboard->new(current_user => $currentuser);

    my ($ok, $msg) =
        $dashboard->load_by_id($subscription->sub_value('dashboard_id'));

    # failed to load dashboard. perhaps it was deleted or it changed privacy
    if (!$ok) {
        warning "Unable to load dashboard %1 of subscription %2 for user %3: %4",
            $subscription->sub_value('dashboard_id'),
            $subscription->id,
            $currentuser->name,
            $msg;

        my $ok = RT::Interface::Email::send_email_using_template(
            from      => $from,
            to        => email_of($currentuser),
            template  => 'Error: Missing dashboard',
            arguments => {
                subscription_obj => $subscription,
            },
        );

        # only delete the subscription if the email looks like it went through
        if ($ok) {
            my ($deleted, $msg) = $subscription->delete();
            if ($deleted) {
                verbose("Deleted an obsolete subscription: %1", $msg);
            }
            else {
                warning("Unable to delete an obsolete subscription: %1", $msg);
            }
        }
        else {
            warning("Unable to notify %1 of an obsolete subscription", $currentuser->name);
        }

        return;
    }

    verbose 'Creating dashboard "%1" for user "%2":',
            $dashboard->name,
            $currentuser->name;

    if ($opts{'dryrun'}) {
        print << "SUMMARY";
    Dashboard: @{[ $dashboard->name ]}
    User:   @{[ $currentuser->name ]} <$email>
SUMMARY
        return;
    }

    $HTML::Mason::Commands::session{CurrentUser} = $currentuser;
    my $contents = run_component(
        '/Dashboards/Render.html',
        id      => $dashboard->id,
        preview => 0,
    );

    for (@{ RT->config->get('email_dashboard_remove') || [] }) {
        $contents =~ s/$_//g;
    }

    debug "Got %1 characters of output.", length $contents;

    $contents = HTML::RewriteAttributes::Links->rewrite(
        $contents,
        Jifty->config->framework('Web')->{BaseURL} . ':' . Jifty->config->framework('Web')->{Port} . '/' . '/Dashboards/Render.html',
    );

    email_dashboard($currentuser, $email, $dashboard, $subscription, $contents);
    
}

sub email_dashboard {
    my ($currentuser, $email, $dashboard, $subscription, $content) = @_;
    

    verbose 'Sending dashboard "%1" to user %2 <%3>',
            $dashboard->name,
            $currentuser->name,
            email_of($currentuser);

    my $subject = sprintf '[%s] ' .  RT->config->get('dashboard_subject'),
        RT->config->get('rtname'),
        ucfirst($subscription->sub_value('Frequency')),
        $dashboard->name;

    my $entity = build_email($content, $from, $email, $subject);

    my $ok = RT::Interface::Email::send_email(
        entity => $entity,
    );

    debug "Done sending dashboard to %1 <%2>",
          $currentuser->name, $email
              and return if $ok;

    error 'Failed to email dashboard to user %1 <%2>',
          $currentuser->name, $email;
}

sub build_email {
    my ($content, $from, $to, $subject) = @_;
    my @parts;
    my %cid_of;

    $content = HTML::RewriteAttributes::Resources->rewrite($content, sub {
            my $uri = shift;

            # already attached this object
            return "cid:$cid_of{$uri}" if $cid_of{$uri};

            $cid_of{$uri} = time() . $$ . int(rand(1e6));
            my ($data, $filename, $mimetype, $encoding) = get_resource($uri);

            # downgrade non-text strings, because all strings are utf8 by
            # default, which is wrong for non-text strings.
            if ( $mimetype !~ m{text/} ) {
                utf8::downgrade( $data, 1 ) or warning "downgrade $data failed";
            }

            push @parts, MIME::Entity->build(
                Top          => 0,
                Data         => $data,
                Type         => $mimetype,
                Encoding     => $encoding,
                Disposition  => 'inline',
                Name         => $filename,
                'Content-Id' => $cid_of{$uri},
            );

            return "cid:$cid_of{$uri}";
        },
        inline_css => sub {
            my $uri = shift;
            my ($content) = get_resource($uri);
            return $content;
        },
        inline_imports => 1,
    );

    my $entity = MIME::Entity->build(
        From    => $from,
        To      => $to,
        Subject => $subject,
        Type    => "multipart/mixed",
    );

    $entity->attach(
        Data        => $content,
        Type        => 'text/html',
        Disposition => 'inline',
    );

    for my $part (@parts) {
        $entity->add_part($part);
    }

    return $entity;
}

sub get_from {
    RT->config->get('dashboard_address') || RT->config->get('owner_email')
}

{
    my $mason;
    my $outbuf = '';

    sub mason {
        unless ($mason) {
            debug "Creating Mason object.";
            $mason = HTML::Mason::Interp->new(
                RT::Interface::Web::Handler->default_handler_args,
                out_method => \$outbuf,
                autohandler_name => '', # disable forced login and more
            );
        }
        return $mason;
    }

    sub run_component {
        mason->exec(@_);
        my $ret = $outbuf;
        $outbuf = '';
        return $ret;
    }
}

{
    my %cache;

    sub hour_dow_dom_in {
        my $tz = shift;
        return @{$cache{$tz}} if exists $cache{$tz};

        my ($hour, $dow, $dom);

        {
            local $ENV{'TZ'} = $tz;
            ## Using POSIX::tzset fixes a bug where the TZ environment variable
            ## is cached.
            tzset();
            (undef, undef, $hour, $dom, undef, undef, $dow) = localtime($now);
        }
        tzset(); # return back previous value

        $hour = "0$hour"
            if length($hour) == 1;
        $dow = (qw/Sunday Monday Tuesday Wednesday Thursday Friday Saturday/)[$dow];

        return @{$cache{$tz}} = ($hour, $dow, $dom);
    }
}

sub get_resource {
    my $uri = URI->new(shift);
    my ($content, $filename, $mimetype, $encoding);

    verbose "Getting resource %1", $uri;

    # strip out the equivalent of WebURL, so we start at the correct /
    my $path = $uri->path;
    my $webpath = RT->config->get('web_path');
    $path =~ s/^\Q$webpath//;

    # add a leading / if needed
    $path = "/$path"
        unless $path =~ m{^/};

    # grab the query arguments
    my %args;
    for (split /&/, ($uri->query||'')) {
        my ($k, $v) = /^(.*?)=(.*)$/
            or die "Unable to parse query parameter '$_'";

        for ($k, $v) { s/%(..)/chr hex $1/ge }

        # no value yet, simple key=value
        if (!exists $args{$k}) {
            $args{$k} = $v;
        }
        # already have key=value, need to upgrade it to key=[value1, value2]
        elsif (!ref($args{$k})) {
            $args{$k} = [$args{$k}, $v];
        }
        # already key=[value1, value2], just add the new value
        else {
            push @{ $args{$k} }, $v;
        }
    }

    debug "Running component '%1'", $path;
    $content = run_component($path, %args);

    # guess at the filename from the component name
    $filename = $2 if $path =~ m{^.*/(.*?)$};

    # the rest of this was taken from Email::MIME::CreateHTML::Resolver::LWP
    ($mimetype, $encoding) = MIME::Types::by_suffix($filename);

    my $content_type = $HTML::Mason::Commands::r->content_type;
    if ($content_type) {
        $mimetype = $content_type;

        # strip down to just a MIME type
        $mimetype = $1 if $mimetype =~ /(\S+);\s*charset=(.*)$/;
    }

    #If all else fails then some conservative and general-purpose defaults are:
    $mimetype ||= 'application/octet-stream';
    $encoding ||= 'base64';

    debug "Resource %1: length=%2 filename='%3' mimetype='%4', encoding='%5'",
        $uri,
        length($content),
        $filename,
        $mimetype,
        $encoding;

    debug "Resource %1: length=%2 filename='%3' mimetype='%4', encoding='%5'",
        $uri,
        length($content),
        $filename,
        $mimetype,
        $encoding;

    return ($content, $filename, $mimetype, $encoding);
}

package RT::Dashboard::FakeRequest;
sub new { bless {}, shift }
sub header_out { shift }
sub headers_out { shift }
sub content_type {
    my $self = shift;
    $self->{content_type} = shift if @_;
    return $self->{content_type};
}

=head1 NAME

rt-email-dashboards - Send email dashboards

=head1 SYNOPSIS

    /opt/rt3/local/sbin/rt-email-dashboards [options]

=head1 DESCRIPTION

This tool will send users email based on how they have subscribed to
dashboards. A dashboard is a set of saved searches, the subscription controls
how often that dashboard is sent and how it's displayed.

Each subscription has an hour, and possibly day of week or day of month. These
are taken to be in the user's time zone if available, UTC otherwise.

=head1 SETUP

You'll need to have cron run this script every hour. Here's an example crontab
entry to do this.

    0 * * * * @PERL@ /opt/rt3/local/sbin/rt-email-dashboards

This will run the script every hour on the hour. This may need some further
tweaking to be run as the correct user.

=head1 OPTIONS

This tool supports a few options. Most are for debugging.

=over 8

=item --help

Display this documentation

=item --dryrun

Figure out which dashboards would be sent, but don't actually generate them

=item --epoch SECONDS

Instead of using the current time to figure out which dashboards should be
sent, use SECONDS (usually since midnight Jan 1st, 1970, so C<1192216018> would
be Oct 12 19:06:58 GMT 2007).

=item --verbose

Print out some tracing information (such as which dashboards are being
generated and sent out)

=item --debug

Print out more tracing information (such as each user and subscription that is
being considered)

=item --all

Disable checking of whether each subscription should be sent right now (should
only be used with --dryrun)

=back

=cut

