#!/usr/bin/perl -w
# BEGIN BPS TAGGED BLOCK {{{
# 
# COPYRIGHT:
#  
# This software is Copyright (c) 1996-2007 Best Practical Solutions, LLC 
#                                          <jesse@bestpractical.com>
# 
# (Except where explicitly superseded by other copyright notices)
# 
# 
# LICENSE:
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/copyleft/gpl.html.
# 
# 
# CONTRIBUTION SUBMISSION POLICY:
# 
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
# 
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
# 
# END BPS TAGGED BLOCK }}}
use strict;
use warnings;

use vars qw($Nobody $SystemUser $item);

use lib "@LOCAL_LIB_PATH@";
use lib "@RT_LIB_PATH@";

#This drags in  RT's config.pm
# We do it in a begin block because RT::Handle needs to know the type to do its
# inheritance
BEGIN {
    use RT;
    RT::load_config();
    RT::InitClasses();
}

use Term::ReadKey;
use Getopt::Long;

$| = 1; # unbuffer all output.

my %args;
GetOptions(
    \%args,
    'action=s',
    'force', 'debug',
    'dba=s', 'dba-password=s', 'prompt-for-dba-password',
    'datafile=s', 'datadir=s'
);

unless ( $args{'action'} ) {
    help();
    exit(-1);
}

# check and setup @actions
my @actions = grep $_, split /,/, $args{'action'};
if ( @actions > 1 && $args{'datafile'} ) {
    print STDERR "You can not use --datafile option with init or multiple actions.\n";
    exit(-1);
}
foreach ( @actions ) {
    unless ( /^(?:init|create|drop|schema|acl|coredata|insert)$/ ) {
        print STDERR "$0 called with an invalid --action parameter.\n";
        exit(-1);
    }
    if ( ($_ eq 'init' || $_ eq 'drop') && @actions > 1 ) {
        print STDERR "You can not mix init or drop action with any action.\n";
        exit(-1);
    }
}

# convert init to multiple actions
if ( $actions[0] eq 'init' ) {
    @actions = qw(create schema acl coredata insert);
    $args{'datafile'} ||= $RT::EtcPath . "/initialdata";
}

# set options from environment
foreach my $key(qw(Type Host Name User Password)) {
    next unless exists $ENV{ 'RT_DB_'. uc $key };
    print "Using Database$key from RT_DB_". uc($key) ." environment variable.\n";
    RT->Config->set( "Database$key", $ENV{ 'RT_DB_'. uc $key });
}

my $db_type = RT->Config->Get('DatabaseType') || '';
my $db_host = RT->Config->Get('DatabaseHost') || '';
my $db_name = RT->Config->Get('DatabaseName') || '';
my $db_user = RT->Config->Get('DatabaseUser') || '';
my $db_pass = RT->Config->Get('DatabasePassword') || '';

# load it here to get error immidiatly if DB type is not supported
require RT::Handle;

if ( $db_type eq 'SQLite' && !File::Spec->file_name_is_absolute($db_name) ) {
    $db_name = File::Spec->catfile($RT::VarPath, $db_name);
    RT->Config->set( DatabaseName => $db_name );
}

my $dba_user = $args{'dba'} || $ENV{'RT_DBA_USER'} || $db_user || '';
my $dba_pass = $args{'dba-password'} || $ENV{'RT_DBA_PASSWORD'};

if ( !$args{force} && ( !defined $dba_pass || $args{'prompt-for-dba-password'} ) ) {
    $dba_pass = get_dba_password();
    chomp $dba_pass if defined($dba_pass);
}

print "Working with:\n"
    ."Type:\t$db_type\nHost:\t$db_host\nName:\t$db_name\n"
    ."User:\t$db_user\nDBA:\t$dba_user\n";

foreach my $action ( @actions ) {
    if ( $action eq 'create' ) {
        my $dbh = get_system_dbh();
        print "Now creating a database for RT.\n";
        if ( $db_type ne 'Oracle' || $dba_user ne $db_user ) {
            RT::Handle->CreateDatabase( $dbh );
        } else {
            print "...skipped as $dba_user is not $db_user or we're working with Oracle.\n";
        }
    }
    elsif ( $action eq 'drop' ) {
        my $dbh = get_system_dbh();

        print "Now dropping RT database\n";
        RT::Handle->DropDatabase( $dbh, Force => $args{'force'} );
    }
    elsif ( $action eq 'schema' ) {
        my $dbh = get_admin_dbh();
        check_db_compatibility( $dbh );

        $RT::Handle = new RT::Handle;
        $RT::Handle->dbh( $dbh );

        print "Now populating database schema.\n";
        $RT::Handle->InsertSchema( $dbh, $args{'datadir'} );
    }
    elsif ( $action eq 'acl' ) {
        my $dbh = get_admin_dbh();
        check_db_compatibility( $dbh );

        $RT::Handle = new RT::Handle;
        $RT::Handle->dbh( $dbh );

        print "Now inserting database ACLs\n";
        $RT::Handle->InsertACL( $dbh, $args{'datadir'} ) # unless $db_type eq 'Oracle'
    }
    elsif ( $action eq 'coredata' ) {
        $RT::Handle = new RT::Handle;
        $RT::Handle->dbh( undef );
        RT::ConnectToDatabase();
        RT::InitLogging();
        RT::InitSystemObjects();
        check_db_compatibility( $RT::Handle->dbh );

        print "Now inserting RT core system objects\n";
        $RT::Handle->InsertInitialData();
    }
    elsif ( $action eq 'insert' ) {
        $RT::Handle = new RT::Handle;
        RT::Init();
        check_db_compatibility( $RT::Handle->dbh );

        print "Now inserting data\n";
        $RT::Handle->InsertData( $args{'datafile'} || ($args{'datadir'}."/content") );
    }
}

sub check_db_compatibility {
    my $dbh = shift;
    if ( lc $db_type eq "mysql" ) {
        # Check which version we're running
        my $version = ($dbh->selectrow_array("show variables like 'version'"))[1];
        unless ( $version ) {
            print STDERR "Couldn't get version of the mysql server\n";
            exit -1;
        }

        ($version) = $version =~ /^(\d+\.\d+)/;
        if ( $version < 4 ) {
            print STDERR "RT is unsupported on MySQL versions before 4.0.x, it's $version\n";
            exit -1;
        }

        # MySQL must have InnoDB support
        if ( $args{'action'} =~ /^(init|insert|schema)$/ ) {
            print "Checking that mysql has spport for InnoDB.\n" if $args{'debug'};
            my $innodb = ($dbh->selectrow_array("show variables like 'have_innodb'"))[1];
            if ( lc $innodb eq "no" ) {
                print STDERR "RT requires that MySQL be compiled with InnoDB table support.\n".
                  "See http://dev.mysql.com/doc/mysql/en/InnoDB.html\n";
                exit -1;
            } elsif ( lc $innodb eq "disabled" ) {
                print STDERR "RT requires that MySQL InnoDB table support be enabled.\n".
                  ($version < 4
                   ? "Add 'innodb_data_file_path=ibdata1:10M:autoextend' to the [mysqld] section of my.cnf\n"
                   : "Remove the 'skip-innodb' line from your my.cnf file, restart MySQL, and try again.\n");
                exit -1;
            }
        }

        if ( $args{'action'} =~ /^(insert)$/ ) {
            print "Checking that Tickets table is of InnoDB type.\n" if $args{'debug'};
            my $create_table = $dbh->selectrow_arrayref("SHOW CREATE TABLE Tickets")->[1];
            unless ( $create_table =~ /(?:ENGINE|TYPE)=InnoDB/i ) {
                print STDERR "RT requires that all its tables be of InnoDB type.\n".
                    "Upgrade RT tables.\n";
                exit -1;
            }
        }
#        if ( $version >= 4.1 && $args{'action'} =~ /^(insert|schema)$/ ) {
#            print "MySQL >= 4.1, checking that user upgraded.\n" if $args{'debug'};
#            my $create_table = $dbh->selectrow_arrayref("SHOW CREATE TABLE Attachments")->[1];
#            unless ( $create_table =~ /\bContent\b[^,]*BLOB/i ) {
#                print STDERR "*** WARNING: RT since version 3.6 has new schema for MySQL versions after 4.1.0\n"
#                    ."Follow instructions in the UPGRADING.mysql file.\n";
#                sleep 3;
#            }
#        }
    }
}

sub get_dba_password {
    print "In order to create or update your RT database,"
        . " this script needs to connect to your "
        . " $db_type instance on $db_host as $dba_user\n";
    print "Please specify that user's database password below. If the user has no database\n";
    print "password, just press return.\n\n";
    print "Password: ";
    ReadMode('noecho');
    my $password = ReadLine(0);
    ReadMode('normal');
    print "\n";
    return ($password);
}

=head2 get_system_dbh

Returns L<DBI> database handle connected to B<system> with DBA credentials.

See also L<RT::Handle/system_dsn>.

=cut

sub get_system_dbh {
    return _get_dbh( RT::Handle->system_dsn, $dba_user, $dba_pass );
}

sub get_admin_dbh {
    return _get_dbh( RT::Handle->dsn, $dba_user, $dba_pass );
}

=head2 get_rt_dbh [USER, PASSWORD]

Returns L<DBI> database handle connected to RT database,
you may specify credentials(USER and PASSWORD) to connect
with. By default connects with credentials from RT config.

=cut

sub get_rt_dbh {
    return _get_dbh( RT::Handle->dsn, $db_user, $db_pass );
}

sub _get_dbh {
    my ($dsn, $user, $pass) = @_;
    my $dbh = DBI->connect(
        $dsn, $user, $pass,
        { RaiseError => 0, PrintError => 0 },
    );
    unless ( $dbh ) {
        my $msg = "Failed to connect to $dsn as user '$user': ". $DBI::errstr;
        if ( $args{'debug'} ) {
            require Carp; Carp::confess( $msg );
        } else {
            print STDERR $msg; exit -1;
        }
    }
    return $dbh;
}

sub help {

    print <<EOF;

$0: Set up RT's database

--action        init    Initialize the database
                drop    Drop the database.
                        This will ERASE ALL YOUR DATA
                insert  Insert data into RT's database.
                        By default, will use RT's installation data.
                        To use a local or supplementary datafile, specify it
                        using the '--datafile' option below.

                acl     Initialize only the database ACLs
                        To use a local or supplementary datafile, specify it
                        using the '--datadir' option below.

                schema  Initialize only the database schema
                        To use a local or supplementary datafile, specify it
                        using the '--datadir' option below.

--datafile /path/to/datafile
--datadir /path/to/              Used to specify a path to find the local
                                database schema and acls to be installed.


--dba                           dba's username
--dba-password                  dba's password
--prompt-for-dba-password       Ask for the database administrator's password interactively


EOF

}

1;
