@Initial = (
    sub {
        my $users = RT::Users->new(RT->SystemUser);
        $users->UnLimit;

        while (my $user = $users->Next) {
            my $settings = $user->Preferences('HomepageSettings')
                or next;
            next if exists $settings->{sidebar};

            $settings->{sidebar} = delete $settings->{summary};
            $user->SetPreferences('HomepageSettings', $settings);
        }
    },
    sub {
        my ($default_portlets) = RT->System->Attributes->Named('HomepageSettings');
        my $settings = $default_portlets->Content;
        return if exists $settings->{sidebar};

        $settings->{sidebar} = delete $settings->{summary};
        $default_portlets->SetContent($settings);
    },
    sub {
        my $cf = RT::CustomField->new( $RT::SystemUser );
        $cf->LoadByCols(
            Name       => 'PublicKey',
            LookupType => RT::User->new( $RT::SystemUser )->CustomFieldLookupType,
        );
        unless ( $cf->id ) {
            $RT::Logger->info("You don't have PublicKey CF. Nothing to do.");
            return 1;
        }
        my ($status, $msg) = $cf->SetName('SMIME Key');
        unless ( $status ) {
            $RT::Logger->error("Couldn't rename custom field: $msg");
        } else {
            $RT::Logger->info("Renamed custom field: $msg");
        }
        return 1;
    },
    sub {
        $RT::Logger->info("Going to delete all SMIMEKeyNotAfter attributes");
        my $attrs = RT::Attributes->new( $RT::SystemUser );
        $attrs->Limit( FIELD => 'ObjectType', VALUE => 'RT::User' );
        $attrs->Limit( FIELD => 'Name', VALUE => 'SMIMEKeyNotAfter' );
        while ( my $attr = $attrs->Next ) {
            my ($status, $msg) = $attr->Delete;
            unless ( $status ) {
                $RT::Logger->error("Couldn't delete attribute: $msg");
            }
        }
        return 1;
    },
);


