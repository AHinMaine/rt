# Initial data for a fresh RT3 Installation.

@Users = (
    {
        name            => 'root',
        gecos           => 'root',
        real_name       => 'Enoch Root',
        password        => 'password',
        email           => "root\@localhost",
        email_confirmed => 1,
        comments        => 'SuperUser',
        privileged      => '1',
    }
);

@Groups = ( );

@Queues = ({ name              => 'General',
             description       => 'The default queue',
             correspond_address => "",
             comment_address    => "", },
           { name        => '___Approvals',
             description => 'A system-internal queue for the approvals system',
             disabled    => 2, } );

use Scalar::Defer 'lazy';
my $approvals_id = lazy {
    my $queue = RT::Model::Queue->new( current_user => RT->system_user );
    $queue->load_by_cols(name => "___Approvals");
    $queue->id;
};

@scrip_actions = (

    {  name        => 'Autoreply To requestors',    # loc
       description =>
'Always sends a message to the requestors independent of message sender' ,                                            # loc
       exec_module => 'Autoreply',
       argument   => 'requestor' },
    { name        => 'Notify requestors',                    # loc
      description => 'Sends a message to the requestors',    # loc
      exec_module  => 'Notify',
      argument    => 'requestor' },
    { name        => 'Notify owner as comment',              # loc
      description => 'Sends mail to the owner',              # loc
      exec_module  => 'NotifyAsComment',
      argument    => 'owner' },
    { name        => 'Notify owner',                         # loc
      description => 'Sends mail to the owner',              # loc
      exec_module  => 'Notify',
      argument    => 'owner' },
    { name        => 'Notify ccs as comment',              # loc
      description => 'Sends mail to the ccs as a comment', # loc
      exec_module  => 'NotifyAsComment',
      argument    => 'cc' },
    { name        => 'Notify ccs',                                   # loc
      description => 'Sends mail to the ccs',                        # loc
      exec_module  => 'Notify',
      argument    => 'cc' },
    { name        => 'Notify admin_ccs as comment',                        # loc
      description => 'Sends mail to the administrative ccs as a comment', # loc
      exec_module  => 'NotifyAsComment',
      argument    => 'admin_cc' },
    { name        => 'Notify admin_ccs',                                   # loc
      description => 'Sends mail to the administrative ccs',              # loc
      exec_module  => 'Notify',
      argument    => 'admin_cc' },

    { name        => 'Notify requestors and ccs as comment',              # loc
      description => 'Send mail to requestors and ccs as a comment',      # loc
      exec_module  => 'NotifyAsComment',
      argument    => 'requestor,cc' },

    { name        => 'Notify requestors and ccs',                         # loc
      description => 'Send mail to requestors and ccs',                   # loc
      exec_module  => 'Notify',
      argument    => 'requestor,cc' },

    { name        => 'Notify requestors, ccs and admin_ccs as comment',    # loc
      description => 'Send mail to all watchers as a "comment"',          # loc
      exec_module  => 'NotifyAsComment',
      argument    => 'All' },
    { name        => 'Notify requestors, ccs and admin_ccs',               # loc
      description => 'Send mail to all watchers',                         # loc
      exec_module  => 'Notify',
      argument    => 'All' },
    { name        => 'Notify Other Recipients as comment',                # loc
      description => 'Sends mail to explicitly listed ccs and Bccs',      # loc
      exec_module  => 'NotifyAsComment',
      argument    => 'OtherRecipients' },
    { name        => 'Notify Other Recipients',                           # loc
      description => 'Sends mail to explicitly listed ccs and Bccs',      # loc
      exec_module  => 'Notify',
      argument    => 'OtherRecipients' },
    { name        => 'User Defined',                                      # loc
      description => 'Perform a user-defined action',                     # loc
      exec_module  => 'UserDefined', },
    {  name        => 'Create Tickets',                                    # loc
       description =>
         'Create new tickets based on this scrip\'s template',             # loc
       exec_module => 'CreateTickets', },
    { name        => 'Open Tickets',                                      # loc
      description => 'Open tickets on correspondence',                    # loc
      exec_module  => 'AutoOpen' },
    { name        => 'Extract Subject Tag',                               # loc
      description => 'Extract tags from a Transaction\'s subject and add them to the Ticket\'s subject.', # loc
      exec_module  => 'ExtractSubjectTag' },
);

@scrip_conditions = (
    { name                 => 'On Create',                                # loc
      description          => 'When a ticket is Created',                 # loc
      applicable_trans_types => 'create',
      exec_module           => 'AnyTransaction', },

    { name                 => 'On Transaction',                           # loc
      description          => 'When anything happens',                    # loc
      applicable_trans_types => 'any',
      exec_module           => 'AnyTransaction', },
    {

      name                 => 'On Correspond',                             # loc
      description          => 'Whenever correspondence comes in',          # loc
      applicable_trans_types => 'correspond',
      exec_module           => 'AnyTransaction', },

    {

      name                 => 'On comment',                                # loc
      description          => 'Whenever comments come in',                 # loc
      applicable_trans_types => 'comment',
      exec_module           => 'AnyTransaction' },
    {

      name                 => 'On Status Change',                          # loc
      description          => 'Whenever a ticket\'s status changes',       # loc
      applicable_trans_types => 'status',
      exec_module           => 'AnyTransaction',

    },
    {

      name                 => 'On priority Change',                       # loc
      description          => 'Whenever a ticket\'s priority changes',    # loc
      applicable_trans_types => 'set',
      exec_module           => 'priorityChange',
    },
    {

      name                 => 'On owner Change',                           # loc
      description          => 'Whenever a ticket\'s owner changes',        # loc
      applicable_trans_types => 'any',
      exec_module           => 'OwnerChange',

    },
    {

      name                 => 'On queue Change',                           # loc
      description          => 'Whenever a ticket\'s queue changes',        # loc
      applicable_trans_types => 'set',
      exec_module           => 'QueueChange',

    },
    {  name                 => 'On Resolve',                               # loc
       description          => 'Whenever a ticket is resolved',            # loc
       applicable_trans_types => 'status',
       exec_module           => 'StatusChange',
       argument             => 'resolved'

    },

    {  name                 => 'User Defined',                             # loc
       description          => 'Whenever a user-defined condition occurs', # loc
       applicable_trans_types => 'any',
       exec_module           => 'UserDefined'

    },

    {  name                 => 'On Close',                                 # loc
       description          => 'Whenever a ticket is closed', # loc
       applicable_trans_types => 'status,set',
       exec_module           => 'CloseTicket',
    },
    {  name                 => 'On Reopen',                                # loc
       description          => 'Whenever a ticket is reopened', # loc
       applicable_trans_types => 'status,set',
       exec_module           => 'ReopenTicket',
    },

);

@Templates = (
    { queue       => '0',
      name        => 'Blank',                                             # loc
      description => 'A blank template',                                  # loc
      content     => '', },
    {  queue       => '0',
       name        => 'Autoreply',                                         # loc
       description => 'Default Autoresponse template',                     # loc
       content     => 'Subject: AutoReply: {$ticket->subject}


Greetings,

This message has been automatically generated in response to the
creation of a trouble ticket regarding:
	"{$ticket->subject()}", 
a summary of which appears below.

There is no need to reply to this message right now.  Your ticket has been
assigned an ID of [{$ticket->queue->subject_tag || $rtname} #{$ticket->id()}].

Please include the string:

         [{$ticket->queue->subject_tag || $rtname} #{$ticket->id}]

in the subject line of all future correspondence about this issue. To do so, 
you may reply to this message.

                        Thank you,
                        {$ticket->queue->correspond_address}

-------------------------------------------------------------------------
{$transaction->content()}
'
    },

    {  queue       => '0',
       name        => 'Transaction',                     # loc
       description => 'Default transaction template',    # loc
       content     => 'RT-Attach-Message: yes


{$transaction->created}: Request {$ticket->id} was acted upon.
Transaction: {$transaction->description}
       Queue: {$ticket->queue->name}
     Subject: {$transaction->subject || $ticket->subject || "(No subject given)"}
       owner: {$ticket->owner->name}
  requestors: {$ticket->role_group("requestor")->member_emails_as_string}
      Status: {$ticket->status}
 Ticket <URL: {RT->config->get(\'web_url\')}Ticket/Display.html?id={$ticket->id} >


{$transaction->content()}
'
    },

    {

      queue       => '0',
      name        => 'Admin Correspondence',                     # loc
      description => 'Default admin correspondence template',    # loc
      content     => 'RT-Attach-Message: yes


<URL: {RT->config->get(\'web_url\')}Ticket/Display.html?id={$ticket->id} >

{$transaction->content()}
'
    },

    {  queue       => '0',
       name        => 'Correspondence',                          # loc
       description => 'Default correspondence template',         # loc
       content     => 'RT-Attach-Message: yes

{$transaction->content()}
'
    },

    {  queue       => '0',
       name        => 'Admin comment',                           # loc
       description => 'Default admin comment template',          # loc
       content     =>
'Subject: [comment] {my $s=($transaction->subject||$ticket->subject); $s =~ s/\\[comment\\]//g; $s =~ s/^Re//i; $s;}


{RT->config->get(\'web_url\')}Ticket/Display.html?id={$ticket->id}
This is a comment.  It is not sent to the requestor(s):

{$transaction->content()}
'
    },

    {  queue       => '0',
       name        => 'Status Change',                                     # loc
       description => 'Ticket status changed',                             # loc
       content     => 'Subject: Status Changed to: {$transaction->new_value}


{RT->config->get(\'web_url\')}Ticket/Display.html?id={$ticket->id}

{$transaction->content()}
'
    },

    {

      queue       => '0',
      name        => 'resolved',                 # loc
      description => 'Ticket Resolved',          # loc
      content     => 'Subject: Resolved: {$ticket->subject}

According to our records, your request has been resolved. If you have any
further questions or concerns, please respond to this message.
'
    },
    {  queue       => $approvals_id,
       name        => "New Pending Approval",    # loc
       description =>
         "Notify owners and admin_ccs of new items pending their approval", # loc
       content => 'Subject: New Pending Approval: {$ticket->subject}

Greetings,

There is a new item pending your approval: "{$ticket->subject()}", 
a summary of which appears below.

Please visit {RT->config->get(\'web_url\')}Approvals/Display.html?id={$ticket->id}
to approve or reject this ticket, or {RT->config->get(\'web_url\')}Approvals/ to
batch-process all your pending approvals.

-------------------------------------------------------------------------
{$transaction->content()}
'
    },
    {  queue       => $approvals_id,
       name        => "Approval Passed",    # loc
       description =>
         "Notify Requestor of their ticket has been approved by some approver", # loc
       content => 'Subject: Ticket Approved: {$ticket->subject}

Greetings,

Your ticket has been approved by { eval { $approval->owner->name } }.
Other approvals may be pending.

Approver\'s notes: { $notes }

'
    },
    {  queue       => $approvals_id,
       name        => "All Approvals Passed",    # loc
       description =>
         "Notify Requestor of their ticket has been approved by all approvers", # loc

       content => 'Subject: Ticket Approved: {$ticket->subject}

Greetings,

Your ticket has been approved by { eval { $approval->owner->name } }.
Its Owner may now start to act on it.

Approver\'s notes: { $notes }
'
    },
    {  queue       => $approvals_id,
       name        => "Approval Rejected",    # loc
       description =>
         "Notify owner of their rejected ticket", # loc
       content => 'Subject: Ticket Rejected: {$ticket->subject}

Greetings,

Your ticket has been rejected by { eval { $approval->owner->name } }.

Approver\'s notes: { $notes }
'
    },
    {  queue       => $approvals_id,
       name        => "Approval Ready for Owner",    # loc
       description =>
         "Notify Owner of their ticket has been approved and is ready to be acted on", # loc
       content => 'Subject: Ticket Approved: {$ticket->subject}

Greetings,

The ticket has been approved, you may now start to act on it.

'
    },
    {  queue       => 0,
       name        => "Forward",    # loc
       description => "Heading of a forwarded message", # loc
       content => q{

This is forward of transaction #{ $transaction->id } of a ticket #{ $ticket->id }
}
    },
    {  queue       => 0,
       name        => "Error: public key",    # loc
       description =>
         "Inform user that he has problems with public key and couldn't recieve encrypted content", # loc
       content => q{Subject: We have no your public key or it's wrong

You received this message as we have no your public PGP key or we have a problem with your key. Inform the administrator about the problem.
}
    },
    {  queue       => 0,
       name        => "Error to RT owner: public key",    # loc
       description =>
         "Inform RT owner that user(s) have problems with public keys", # loc
       content => q{Subject: Some users have problems with public keys

You received this message as RT has problems with public keys of the following user:
{
    foreach my $e ( @BadRecipients ) {
        $OUT .= "* ". $e->{'Message'} ."\n";
    }
}}
    },
    {  queue       => 0,
       name        => "Error: no private key",    # loc
       description =>
         "Inform user that we received an encrypted email and we have no private keys to decrypt", # loc
       content => q{Subject: we received message we cannot decrypt

You sent an encrypted message with subject '{ $Message->head->get('subject') }',
but we have no private key it's encrypted to.

Please, check that you encrypt messages with correct keys
or contact the system administrator.}
    },
    {  queue       => 0,
       name        => "Error: bad GnuPG data",    # loc
       description =>
         "Inform user that a message he sent has invalid GnuPG data", # loc
       content => q{Subject: We received a message we cannot handle

You sent us a message that we cannot handle due to corrupted GnuPG signature or encrypted block. we get the following error(s):
{ foreach my $msg ( @Messages ) {
    $OUT .= "* $msg\n";
  }
}}
    },
    {  queue       => 0,
       name        => "passwordChange",    # loc
       description =>
         "Inform user that his password has been reset", # loc
       content => q{Subject: [{RT->config->get('rtname')}] password reset

Greetings,

Someone at {$ENV{'REMOTE_ADDR'}} requested a password reset for you on {RT->config->get('web_url')}

Your new password is:
  {$Newpassword}
}
    },

	       {   queue       => '0',
		   name        => 'email Digest',    # loc
		   description => 'email template for periodic notification digests',  # loc
		   content => q[Subject: RT email Digest

{ $Argument }
],
               },

{
    queue       => 0,
    name        => "Error: Missing dashboard",    # loc
    description =>
      "Inform user that a dashboard he subscribed to is missing", # loc
    content => q{Subject: [{RT->config->get('rtname')}] Missing dashboard!

Greetings,

You are subscribed to a dashboard that is currently missing. Most likely, the dashboard was deleted.

RT will remove this subscription as it is no longer useful. Here's the information RT had about your subscription:

DashboardID:  { $subscription_obj->sub_value('Dashboardid') }
Frequency:    { $subscription_obj->sub_value('Frequency') }
Hour:         { $subscription_obj->sub_value('Hour') }
{
    $subscription_obj->sub_value('Frequency') eq 'weekly'
    ? "Day of week:  " . $subscription_obj->sub_value('Dow')
    : $subscription_obj->sub_value('Frequency') eq 'monthly'
      ? "Day of month: " . $subscription_obj->sub_value('Dom')
      : ''
}
}
},
);
# }}}

@Scrips = (
    {  description    => 'On Correspond Open Tickets',
       scrip_condition => 'On Correspond',
       scrip_action    => 'Open Tickets',
       template       => 'Blank' },
    {  description    => 'On owner Change Notify owner',
       scrip_condition => 'On owner Change',
       scrip_action    => 'Notify owner',
       template       => 'Transaction' },
    {  description    => 'On Create Autoreply To requestors',
       scrip_condition => 'On Create',
       scrip_action    => 'AutoReply To requestors',
       template       => 'AutoReply' },
    {  description    => 'On Create Notify admin_ccs',
       scrip_condition => 'On Create',
       scrip_action    => 'Notify admin_ccs',
       template       => 'Transaction' },
    {  description    => 'On Correspond Notify admin_ccs',
       scrip_condition => 'On Correspond',
       scrip_action    => 'Notify admin_ccs',
       template       => 'Admin Correspondence' },
    {  description    => 'On Correspond Notify requestors and ccs',
       scrip_condition => 'On Correspond',
       scrip_action    => 'Notify requestors And ccs',
       template       => 'Correspondence' },
    {  description    => 'On Correspond Notify Other Recipients',
       scrip_condition => 'On Correspond',
       scrip_action    => 'Notify Other Recipients',
       template       => 'Correspondence' },
    {  description    => 'On comment Notify admin_ccs as comment',
       scrip_condition => 'On comment',
       scrip_action    => 'Notify admin_ccs As comment',
       template       => 'Admin comment' },
    {  description    => 'On comment Notify Other Recipients as comment',
       scrip_condition => 'On comment',
       scrip_action    => 'Notify Other Recipients As comment',
       template       => 'Correspondence' },
    {  description    => 'On Resolve Notify requestors',
       scrip_condition => 'On Resolve',
       scrip_action    => 'Notify requestors',
       template       => 'resolved' },
    {  description    => "On transaction, add any tags in the transaction's subject to the ticket's subject",
       scrip_condition => 'On Transaction',
       scrip_action    => 'Extract Subject Tag',
       template       => 'Blank' },
);

@ACL = (
    { user_id => 'root',        # - principalid
      right  => 'SuperUser', },
    { GroupDomain => 'SystemInternal',
      GroupType => 'privileged',
      Right  => 'ShowApprovalsTab', },
);

# Predefined searches

@Attributes = (
    { name => 'Search - My Tickets',
      description => '%1 highest priority tickets I own', # loc
      content     =>
      { format =>  q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__id__</a>/TITLE:#',}
                 . q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__subject__</a>/TITLE:subject',}
                 . q{priority, queue_name, extended_status},
        query   => " owner = '__CurrentUser__' AND ( Status = 'new' OR Status = 'open')",
        order_by => 'priority',
        order   => 'DESC'
      },
    },
    { name => 'Search - Unowned Tickets',
      description => '%1 newest unowned tickets', # loc
      content     =>
# 'Take' #loc
      { format =>  q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__id__</a>/TITLE:#',}
                 . q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__subject__</a>/TITLE:subject',}
                 . q{queue_name, extended_status, created_relative, }
                 . q{'<A HREF="__WebPath__/Ticket/Display.html?Action=Take&id=__id__">___(Take)__</a>/TITLE:NBSP'},
        query   => " owner = 'Nobody' AND ( Status = 'new' OR Status = 'open')",
        order_by => 'Created',
        order   => 'DESC'
      },
    },
    { name => 'Search - Bookmarked Tickets',
      description => 'Bookmarked Tickets', #loc
      content     =>
      { format => q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__id__</a>/TITLE:#',}
                . q{'<a href="__WebPath__/Ticket/Display.html?id=__id__">__subject__</a>/TITLE:subject',}
                . q{priority, queue_name, extended_status, bookmark},
        query   => "id = '__Bookmarked__'",
        order_by => 'LastUpdated',
        order   => 'DESC' },
    },
    { name => 'HomepageSettings',
      description => 'HomepageSettings',
      content =>
      { 'body' => # loc
	[ { type => 'system', name => 'My Tickets' },
	  { type => 'system', name => 'Unowned Tickets' },
 	  { type => 'system', name => 'Bookmarked Tickets' },
	  { type => 'component',  name => 'QuickCreate'},
	],
        'summary' => # loc
	[ 
	  { type => 'component', name => 'MyReminders' },
          { type => 'component', name => 'Quicksearch' },
	  { type => 'component', name => 'Dashboards' },
	  { type => 'component', name => 'RefreshHomepage' },
	]
      },
    },
    { name => 'StatusSchemas',
      description => 'all system status schemas',
      content => {
        default => {
            initial  => ['new'],
            active   => [ 'open', 'stalled'],
            inactive => ['resolved', 'rejected', 'deleted'],
            transitions => {
                new      => [qw(open resolved rejected deleted)],
                open     => [qw(stalled resolved rejected deleted)],
                stalled  => [qw(open)],
                resolved => [qw(open)],
                rejected => [qw(open)],
                deleted  => [qw(open)],
            },
            actions => {
                'new -> open'     => ['Open It', 'respond'],
                'new -> resolved' => ['Resolve', 'comment'],
                'new -> rejected' => ['Reject',  'respond'],
                'new -> deleted'  => ['Delete',  ''],

                'open -> stalled'  => ['Stall',   'comment'],
                'open -> resolved' => ['Resolve', 'comment'],
                'open -> rejected' => ['Reject',  'respond'],
                'open -> deleted'  => ['Delete',  'hide'],

                'stalled -> open'  => ['Open It',  ''],
                'resolved -> open' => ['Re-open',  'comment'],
                'rejected -> open' => ['Re-open',  'comment'],
                'deleted -> open'  => ['Undelete', ''],
            },
        }
      },
    },
);
