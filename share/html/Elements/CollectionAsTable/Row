%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 1996-2008 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<%ARGS>
$i => undef
@format => undef
$record => undef
$maxitems => undef
$depth => undef
$warning => undef
$column_map => {}
$class     => 'RT__Model__Ticket'
</%ARGS>
<%init>
$m->out(  '<tr class="'
        . ( $warning ? 'warnline' : $i % 2 ? 'oddline' : 'evenline' ) . '" >'
        . "\n" );
use HTML::Entities;
my $item;
foreach my $column (@format) {
    if ( defined $column->{title} && $column->{title} eq 'NEWLINE' ) {
        while ( $item < $maxitems ) {
            $m->out(qq{<td class="collection-as-table">&nbsp;</td>\n});
            $item++;
        }
        $item = 0;
        $m->out( '</tr>' . "\n" );
        $m->out(  '<tr class="'
                . ( $warning ? 'warnline' : $i % 2 ? 'oddline' : 'evenline' )
                . '" >'
                . "\n" );
        next;
    }

    my $css_class = $column->{class} ? encode_entities( $column->{class}, q{'"&<>} ) : 'collection-as-table';
    $m->out(qq{<td class="$css_class" });

    my $align = $column->{align};
    my $style = $column->{style};
    my $span  = $column->{span};

    $item += ($span || 1);
    

    my @out;
    foreach my $subcol ( @{ $column->{output} } ) {
        unless ( $subcol =~ /^__(.*?)__$/ ) {
            push @out, $subcol;
            next;
        }

        my $col = $1;
        $style = $m->comp(
            "/Elements/ColumnMap",
            class => $class,
            name  => $col,
            attr  => 'style'
        );
        $align = $m->comp(
            "/Elements/ColumnMap",
            class => $class,
            name  => $col,
            attr  => 'align'
        );
        unless ( exists $column_map->{$col} ) {
            $column_map->{$col} = $m->comp(
                "/Elements/ColumnMap",
                class => $class,
                name  => $col,
                attr  => 'value'
            );
        }

        my $value = $column_map->{$col};

        if ( ref $value ) {

            # All HTML snippets are returned by the callback function
            # as scalar references.  Data fetched from the objects are
            # plain scalars, and needs to be escaped properly.
            push @out, grep defined && length,
                map { ref($_) ? $$_ : $m->interp->apply_escapes( $_ => 'h' ) }
                $value->( $record, $i );
        } elsif ( defined $value && length $value ) {

            # Simple value; just escape it.
            push @out, $m->interp->apply_escapes( $value => 'h' );
        }
        s/\n/<br \/>/gs for @out;
    }

    $m->out( 'align="'   . $m->interp->apply_escapes( $align => 'h' ) . '"' )
        if $align;
    $m->out( 'style="'   . $m->interp->apply_escapes( $style => 'h' ) . '"' )
        if $style;
    $m->out( 'colspan="' . $m->interp->apply_escapes( $span  => 'h' ) . '"' )
        if $span;

    $m->out('>');
    $m->out(@out) if @out;
    $m->out( '</td>' . "\n" );
}
$m->out('</tr>');
</%init>
