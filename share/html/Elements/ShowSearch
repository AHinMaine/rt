%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 1996-2008 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<&|/Widgets/TitleBox,
    title => _($search->description, $ProcessedSearchArg->{'rows'}),
    title_href => $query_link_url.$query_string,
    titleright => $customize ? _('Edit') : '',
    titleright_href => $customize,
    hideable => $hideable &>
<& $query_display_component, hideable => $hideable, %$ProcessedSearchArg,
    show_navigation => 0, class => 'RT::Model::TicketCollection' &>
</&>
<%init>
my $search;
my $user = Jifty->web->current_user->user_object;
my $SearchArg;
my $customize;
my $query_display_component = '/Elements/CollectionList';
my $query_link_url = RT->config->get('web_path').'/Search/Results.html';

if ($saved_search) {
    my ( $container_object, $search_id ) = _parse_saved_search($saved_search);
    unless ( $container_object ) {
        $m->out(_("Either you have no rights to view saved search %1 or identifier is incorrect", $saved_search));
        return;
    }
    $search = $container_object->attributes->with_id($search_id);
    unless ( $search->id && ref( $SearchArg = $search->content ) eq 'HASH' ) {
         $m->out(_("Saved Search %1 not found", $saved_search)) unless $ignore_missing;
        return;
    }
    $SearchArg->{'search_type'} ||= 'Ticket';
    if ( $SearchArg->{search_type} ne 'Ticket' ) {

        # XXX: dispatch to different handler here
        $query_display_component
            = '/Search/Elements/' . $SearchArg->{search_type};
        $query_link_url = Jifty->web->url .
            "/Search/$SearchArg->{search_type}.html";
    } else {
        $customize = RT->config->get('web_path') . '/Search/Build.html?'
            . $m->comp( '/Elements/QueryString',
            saved_search_load => $saved_search );
    }
} else {
    ($search) = RT->system->attributes->named( 'Search - ' . $name );
    unless ( $search && $search->id ) {
        my (@custom_searches) = RT->system->attributes->named('saved_search');
        foreach my $custom (@custom_searches) {
            if ($custom->description eq $name) { $search = $custom; last }
        }
        unless ($search && $search->id) {
            $m->out("Predefined search $name not found");
            return;
        }
    }

    $SearchArg = $user->preferences( $search, $search->content );
    $customize = RT->config->get('web_path') . '/Prefs/Search.html?'
        . $m->comp( '/Elements/QueryString',
            name => ref($search) . '-' . $search->id );
}

# ProcessedSearchArg is a search with overridings, but for link we use
# orginal search's poperties
$SearchArg ||= {};
my $ProcessedSearchArg = $SearchArg;
$ProcessedSearchArg = { %$SearchArg, %override } if keys %override;
$m->callback(
    %ARGS,
    callback_name  => 'ModifySearch',
    original_search => $SearchArg,
    search         => $ProcessedSearchArg,
);

foreach ( $SearchArg, $ProcessedSearchArg ) {
    $_->{'format'} =~ s/__WebBaseURL__/Jifty->config->framework('Web')->{BaseURL}/ge;
    $_->{'format'} =~ s/__(Web(?:Path|base))__/scalar RT->config->get($1)/ge;
    $_->{'format'} =~ s/__loc\(["']?(\w+)["']?\)__/_("$1")/ge;
    if ( $_->{'query'} =~ /__Bookmarks__/ ) {
        $_->{'rows'} = 999;

        my $bookmarks = Jifty->web->current_user->user_object->first_attribute('Bookmarks');
        $bookmarks = $bookmarks->content if $bookmarks;
        $bookmarks ||= {};
        my $query = join(" OR ", map " id = '$_' ", grep $bookmarks->{ $_ }, keys %$bookmarks ) || 'id=0';
        $_->{'query'} =~ s/__Bookmarks__/( $query )/g;
    }
}

my $query_string = '?' . $m->comp( '/Elements/QueryString', %$SearchArg );

</%init>
<%ARGS>
$name          => undef
$saved_search   => undef
%override      => ()
$ignore_missing => undef
$hideable      => 1
</%ARGS>
