%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 1996-2008 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
% $m->callback( Ticket => $ticket, actions=> $actions, tabs => $tabs, %ARGS );
<& /Elements/Tabs, 
    tabs => $tabs, 
    actions => $actions, 
    current_tab => $current_tab, 
    current_toptab => $current_toptab,
    title => $title &> 
<%INIT>
my $tabs = {};
my $actions;

my $current_toptab = "Search/Build.html", my $searchtabs = {};

if ($ticket) {

    my $id = $ticket->id();

    if ( defined Jifty->web->session->get('tickets') ) {

        # we have to update session data if we get new ItemMap
        my $updatesession = 1 unless ( Jifty->web->session->get('tickets')->{'item_map'} );

        my $item_map = Jifty->web->session->get('tickets')->item_map;

        if ($updatesession) {
            Jifty->web->session->get('tickets')->prep_for_serialization();
        }

        # Don't display prev links if we're on the first ticket
        if ( $item_map->{ $ticket->id }->{prev} ) {
            $searchtabs->{'_a'} = {
                class => "nav",
                path  => "Ticket/Display.html?id=" . $item_map->{first},
                title => '<< ' . _('First')
            };
            $searchtabs->{"_b"} = {
                class => "nav",
                path  => "Ticket/Display.html?id="
                    . $item_map->{ $ticket->id }->{prev},
                title => '< ' . _('Prev')
            };
        }
  
        # Don't display next links if we're on the last ticket
        if ( $item_map->{ $ticket->id }->{next} ) {
            $searchtabs->{'d'} = {
                class => "nav",
                path  => "Ticket/Display.html?id="
                    . $item_map->{ $ticket->id }->{next},
                title => _('next') . ' >'
            };
            $searchtabs->{'e'} = {
                class => "nav",
                path  => "Ticket/Display.html?id=" . $item_map->{last},
                title => _('Last') . ' >>'
            };
        }
    }

    $tabs->{"this"} = {
        class          => "currentnav",
        path           => "Ticket/Display.html?id=" . $ticket->id,
        title          => "#" . $id,
        current_subtab => $current_subtab
    };

    my $ticket_page_tabs = {
        _A => {
            title => _('Display'),
            path  => "Ticket/Display.html?id=" . $id,
        },

        _Ab => {
            title => _('History'),
            path  => "Ticket/History.html?id=" . $id,
        },
        _B => {
            title => _('Basics'),
            path  => "Ticket/Modify.html?id=" . $id,
        },

        _C => {
            title => _('Dates'),
            path  => "Ticket/ModifyDates.html?id=" . $id,
        },
        _D => {
            title => _('People'),
            path  => "Ticket/ModifyPeople.html?id=" . $id,
        },
        _E => {
            title => _('Links'),
            path  => "Ticket/ModifyLinks.html?id=" . $id,
        },
        _X => {
            title => _('Jumbo'),
            path  => "Ticket/ModifyAll.html?id=" . $id,
        },

    };

    if ( RT->config->get('EnableReminders') ) {
        $ticket_page_tabs->{_F} = {
            title     => _('Reminders'),
            path      => "Ticket/Reminders.html?id=" . $id,
            separator => 1,
        };
    }

    foreach my $tab ( sort keys %{$ticket_page_tabs} ) {
        if ( $ticket_page_tabs->{$tab}->{'path'} eq $current_tab ) {
            $ticket_page_tabs->{$tab}->{"subtabs"} = $subtabs;
            $tabs->{'this'}->{"current_subtab"}
                = $ticket_page_tabs->{$tab}->{"path"};
        }
    }
    $tabs->{'this'}->{"subtabs"} = $ticket_page_tabs;
    $current_tab = "Ticket/Display.html?id=" . $id;

    my %can = ( ModifyTicket => $ticket->current_user_has_right('ModifyTicket'), );

    if ( $can{'ModifyTicket'} or $ticket->current_user_has_right('ReplyToTicket') )
    {
        $actions->{'F'} = {
            title => _('Reply'),
            path  => "Ticket/Update.html?action=respond&id=" . $id,
        };
    }

    if ( $can{'ModifyTicket'} ) {
        my $current = $ticket->status;
        my $schema = $ticket->queue->status_schema;
        my $i = 1;
        foreach my $next ( $schema->transitions( $current ) ) {
            my $action = $schema->transition_action( $current => $next );
            next if $action eq 'hide';

            my $path = 'Ticket/';
            if ( $action ) {
                $path .= "Update.html?". $m->comp(
                    '/Elements/QueryString',
                    action => $action,
                    default_status => $next,
                    id => $id
                );
            } else {
                $path .= "Display.html?". $m->comp(
                    '/Elements/QueryString',
                    Status => $next,
                    id => $id
                );
            }
            $actions->{'G'. $i++} = {
                path => $path,
                title => _( $schema->transition_label( $current => $next ) ),
            };
        }
    }

    if ( $ticket->current_user_has_right('OwnTicket') ) {
        if ( $ticket->owner_obj->id == $RT::nobody->id ) {
            $actions->{'B'} = {
                path  => "Ticket/Display.html?action=take&id=" . $id,
                title => _('Take'),
                }
                if $can{'ModifyTicket'}
                    or $ticket->current_user_has_right('TakeTicket');
        } elsif ( $ticket->owner_obj->id != Jifty->web->current_user->id ) {
            $actions->{'C'} = {
                path  => "Ticket/Display.html?action=steal&id=" . $id,
                title => _('Steal'),
                }
                if $can{'ModifyTicket'}
                    or $ticket->current_user_has_right('StealTicket');
        }
    }

    if (   $can{'ModifyTicket'}
        or $ticket->current_user_has_right('CommentOnTicket') )
    {
        $actions->{'E'} = {
            title => _('Comment'),
            path  => "Ticket/Update.html?action=comment&id=" . $id,
        };
    }

    $actions->{'_ZZ'}
        = { html => $m->scomp( '/Ticket/Elements/Bookmark', id => $ticket->id ),
        };

}

if ( ( defined $actions->{A} || defined $actions->{B} || defined $actions->{C} )
    && (   defined $actions->{E}
        || defined $actions->{F}
        || defined $actions->{G} ) )
{

    if    ( defined $actions->{C} ) { $actions->{C}->{separator} = 1 }
    elsif ( defined $actions->{B} ) { $actions->{B}->{separator} = 1 }
    elsif ( defined $actions->{A} ) { $actions->{A}->{separator} = 1 }
}

my $args = '';
my $has_query = '';
my %query_args;
my $search_id = $ARGS{'saved_search_id'}
            || Jifty->web->session->get('CurrentSearchHash') && Jifty->web->session->get('CurrentSearchHash')->{'searchid'} || '';

$has_query = 1 if ( $ARGS{'query'} or Jifty->web->session->get('CurrentSearchHash') && Jifty->web->session->get('CurrentSearchHash')->{'query'} );
  
%query_args = (

        saved_search_id => ($search_id eq 'new') ? undef : $search_id,
        query  => $ARGS{'query'}  || Jifty->web->session->get('CurrentSearchHash') && Jifty->web->session->get('CurrentSearchHash')->{'query'},
        format => $ARGS{'format'} || Jifty->web->session->get('CurrentSearchHash') && Jifty->web->session->get('CurrentSearchHash')->{'format'},
        order_by => $ARGS{'order_by'}
            || Jifty->web->session->get('CurrentSearchHash') && Jifty->web->session->get('CurrentSearchHash')->{'order_by'},
        order => $ARGS{'order'} || Jifty->web->session->get('CurrentSearchHash') && Jifty->web->session->get('CurrentSearchHash')->{'order'},
        page  => $ARGS{'page'}  || Jifty->web->session->get('CurrentSearchHash') && Jifty->web->session->get('CurrentSearchHash')->{'page'},
        rows_per_page  => $ARGS{'rows_per_page'}  || Jifty->web->session->get('CurrentSearchHash') && Jifty->web->session->get('CurrentSearchHash')->{'rows_per_page'},
    );

    $args = "?" . $m->comp( '/Elements/QueryString', %query_args );

$tabs->{"f"} = {
    path  => "Search/Build.html?NewQuery=1",
    title => _('New Search')
};
$tabs->{"g"} = {
    path  => "Search/Build.html" . (($has_query) ? $args : ''),
    title => _('Edit Search')
};
$tabs->{"h"} = {
    path      => "Search/Edit.html$args",
    title     => _('Advanced'),
    separator => 1
};
if ($has_query) {

    if ( $current_tab =~ m{Search/Results.html} ) {
        $current_tab = "Search/Results.html$args";

        if ( Jifty->web->current_user
            ->has_right( right => 'SuperUser', object => RT->system ) )
        {
            my $shred_args = $m->comp(
                '/Elements/QueryString',
                search          => 1,
                plugin          => 'Tickets',
                'Tickets:query' => $query_args{'query'},
                'Tickets:limit' => $query_args{'rows'}
            );

            $tabs->{"shredder"} = {
                path  => 'Admin/Tools/Shredder/?' . $shred_args,
                title => _('Shredder')
            };

        }
    }
    if ( $current_tab =~ m{Search/(Bulk|Build|Edit)\.html} ) {
        $current_tab = "Search/$1.html$args";
    }

    $tabs->{"i"} = {
        path  => "Search/Results.html$args",
        title => _('Show Results'),
    };

    $tabs->{"j"} = {
        path  => "Search/Bulk.html$args",
        title => _('Bulk Update'),
    };

}

foreach my $searchtab ( keys %{$searchtabs} ) {
    ( $searchtab =~ /^_/ )
        ? $tabs->{ "s" . $searchtab } = $searchtabs->{$searchtab}
        : $tabs->{ "z_" . $searchtab } = $searchtabs->{$searchtab};

}
</%INIT>

  
<%ARGS>
$ticket => undef
$subtabs => undef
$current_tab => ''
$current_subtab => ''
$title => undef
$rows_per_page => undef
</%ARGS>
