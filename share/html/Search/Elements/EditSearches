%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 1996-2008 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<&| /Widgets/TitleBox, title => _($Title)&>

%# Hide all the save functionality if the user shouldn't see it.
% if ( $can_modify ) {
<&|/l&>Privacy:</&>
<& selectsearch_object, name => 'SavedSearchOwner', objects => \@objects, object => ( $object && $object->id ) ? $object->object : '' &>
<br />
<&|/l&>description</&>:
<input size="25" name="SavedSearchDescription" value="<% $description || '' %>" />

% if ($Id ne 'new') {
<nobr>
% if ( $Dirty ) {
<input type="submit" class="button" name="SavedSearchRevert" value="<%_('Revert')%>" />
% }
<input type="submit" class="button" name="SavedSearchDelete" value="<%_('Delete')%>" />
% if ( $AllowCopy ) {
<input type="submit" class="button" name="SavedSearchCopy"   value="<%_('Save as New')%>" />
% }
</nobr>
% }
% if ( $object && $object->id ) {
<input type="submit" class="button" name="SavedSearchSave"   value="<%_('Update')%>" />
% } else {
}
<input type="submit" class="button" name="SavedSearchSave"   value="<%_('Save')%>" />
% }
<br />
<hr />
<&|/l&>load saved search:</&>
<& SelectSearchesForObjects, name => 'SavedSearchLoad', objects => \@objects, SearchType => $Type &>
<input type="submit" value="<% _('Load') %>" class="button" />

</&>

<%INIT>
return unless Jifty->web->current_user->has_right(
    right  => 'LoadSavedSearch',
    object => RT->system,
);

my $can_modify = Jifty->web->current_user->has_right(
    Right  => 'CreateSavedSearch',
    object => RT->system,
);

use RT::SavedSearches;
my @objects = RT::SavedSearches->new()->_privacy_objects;
push @objects, RT::System->new()
    if Jifty->web->current_user->has_right( object=> RT->system,
                                          right => 'SuperUser' );
my $is_dirty = sub {
    my %arg = (
        Query       => {},
        SavedSearch => {},
        SearchFields => [qw(Query format order_by order rows_per_page)],
        @_
    );

    my $obj  = $arg{'SavedSearch'}->{'object'};
    return 0 unless $obj && $obj->id;

    foreach( @{ $arg{'SearchFields'} } ) {
        return 1 if $obj->SubValue( $_ ) ne $arg{'Query'}->{$_};
    }

    return 0;
};

# If we're modifying an old query, check if it's been changed
my $Dirty = $is_dirty->(
    Query       => $CurrentSearch,
    SavedSearch => { id => $id, object => $object, Description => $Description },
    SearchFields => \@SearchFields,
);


</%INIT>

<%ARGS>
$id            => 'new'
$object        => undef
$type          => 'Ticket'
$Description   => ''
$CurrentSearch => {}
@SearchFields   => ()
$AllowCopy     => 1
$Title         => _('Saved searches')
</%ARGS>

<%METHOD Init>
<%ARGS>
$query       => {}
$SavedSearch => {}
@SearchFields => qw(Query format order_by order rows_per_page)
</%ARGS>
<%INIT>


$SavedSearch->{'id'}          = $ARGS{'SavedSearchId'}          || 'new';
$SavedSearch->{'description'} = $ARGS{'SavedSearchDescription'} || undef;
$SavedSearch->{'Privacy'}     = $ARGS{'SavedSearchOwner'}       || undef;

my @results;

if ( $ARGS{'SavedSearchRevert'} ) {
    $ARGS{'SavedSearchLoad'} = $SavedSearch->{'id'};
}

if ( $ARGS{'SavedSearchLoad'} ) {
    my ($container, $id ) = _parse_saved_search ($ARGS{'SavedSearchLoad'});
    my $search = $container->attributes->with_id( $id );

    $SavedSearch->{'id'}          = $ARGS{'SavedSearchLoad'};
    $SavedSearch->{'object'}      = $search;
    $SavedSearch->{'description'} = $search->description;
    $query->{$_} = $search->SubValue($_) foreach @SearchFields;

    if ( $ARGS{'SavedSearchRevert'} ) {
        push @results, _('Loaded original "%1" saved search', $SavedSearch->{'description'} );
+     } else {
+         push @results, _('Loaded saved search "%1"', $SavedSearch->{'description'} );
+     }
}
elsif ( $ARGS{'SavedSearchDelete'} ) {
    # We set $SearchId to 'new' above already, so peek into the %ARGS
    my ($container, $id) = _parse_saved_search( $SavedSearch->{'id'} );
    if ( $container && $container->id ) {
        # We have the object the entry is an attribute on; delete the entry...
        $container->attributes->delete_entry( name => 'SavedSearch', id => $id );
    }
    $SavedSearch->{'id'}          = 'new';
    $SavedSearch->{'object'}      = undef;
    $SavedSearch->{'description'} = undef;
    push @results, _("Deleted saved search");
}
elsif ( $ARGS{'SavedSearchCopy'} ) {
    my ($container, $id ) = _parse_saved_search( $ARGS{'SavedSearchid'} );
    $SavedSearch->{'object'} = $container->Attributes->Withid( $id );
    if ( $ARGS{'SavedSearchDescription'} && $ARGS{'SavedSearchDescription'} ne $SavedSearch->{'object'}->Description ) {
        $SavedSearch->{'description'} = $ARGS{'SavedSearchDescription'};
    } else {
        $SavedSearch->{'description'} = _( "%1 copy", $SavedSearch->{'object'}->Description );
    }
    $SavedSearch->{'id'}          = 'new';
    $SavedSearch->{'object'}      = undef;
}

if ( $SavedSearch->{'id'} && $SavedSearch->{'id'} ne 'new'
     && !$SavedSearch->{'object'} )
{
    my ($container, $id ) = _parse_saved_search( $ARGS{'SavedSearchId'} );
    $SavedSearch->{'object'} = $container->attributes->with_id( $id );
    $SavedSearch->{'description'} ||= $SavedSearch->{'object'}->description;
}

return @results;

</%INIT>
</%METHOD>

<%METHOD Save>
<%ARGS>
$query        => {}
$SavedSearch  => {}
@SearchFields => qw(Query format order_by order rows_per_page)
</%ARGS>
<%INIT>

return unless $ARGS{'SavedSearchSave'} || $ARGS{'SavedSearchCopy'};

my @results;
my $obj  = $SavedSearch->{'object'};
my $id   = $SavedSearch->{'id'};
my $desc = $SavedSearch->{'description'};

my $privacy = $SavedSearch->{'Privacy'};

my %params = map { $_ => $Query->{$_} } @SearchFields;
my ($new_obj_type, $new_obj_id) = split(/\-/, ($privacy || ''));

if ( $obj && $obj->id ) {
    # permission check
    if ($obj->object->isa('RT::System')) {
        unless (Jifty->web->current_user->has_right( object=> RT->system, right => 'SuperUser')) {
            push @results, _("No permission to save system-wide searches");
            return @results;
        }
    }

    $obj->set_sub_values( %params );
    $obj->set_description( $desc );

    my $obj_type = ref($obj->object);
    # We need to get current obj_id now, because when we change obj_type to
    # RT::System, $obj->object->id returns 1, not the old one :(
    my $obj_id = $obj->object->id;

    if ( $new_obj_type && $new_obj_id ) {
        my ($val, $msg);
        if ( $new_obj_type ne $obj_type ) {
            ($val, $msg ) = $obj->set_objectType($new_obj_type);
            push @results, _('Unable to set privacy object: %1', $msg) unless ( $val );
        }
        if ( $new_obj_id != $obj_id ) {
            ($val, $msg) = $obj->set_objectid($new_obj_id);
            push @results, _('Unable to set privacy id: %1', $msg) unless ( $val );
        }
    } else {
        push @results, _('Unable to determine object type or id');
    }
    push @results, _('Updated saved search "%1"', $desc);
}
elsif ( $id eq 'new' ) {
    my $saved_search = RT::SavedSearch->new();
    my ($status, $msg) = $saved_search->save(
        privacy      => $privacy,
        name         => $desc,
        type         => $SavedSearch->{'type'},
        search_params => \%params,
    );

    if ( $status ) {
        $SavedSearch->{'object'} =
            Jifty->web->current_user->user_object->attributes->with_id( $saved_search->id );
        # Build new SearchId
        $SavedSearch->{'id'} =
                ref( Jifty->web->current_user->user_object ) . '-'
                    . Jifty->web->current_user->user_object->id
                    . '-SavedSearch-'
                    . $SavedSearch->{'object'}->id;
    }
    else {
        push @results, _("Can't find a saved search to work with").': '._($msg);
    }
}
else {
    push @results, _("Can't save this search");
}

return @results;

</%INIT>
</%METHOD>
