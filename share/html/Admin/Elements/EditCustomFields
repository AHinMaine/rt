%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 1996-2008 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<& /Elements/ListActions, actions => \@results &>

<form action="<%RT->config->get('web_path')%><% $m->request_comp->path |n %>" method="post" name="edit_custom_fields">
<input type="hidden" class="hidden" name="id" value="<% $object->id || ''%>" />
<input type="hidden" class="hidden" name="object_type" value="<% $object_type %>" />
<input type="hidden" class="hidden" name="sub_type" value="<% $sub_type %>" />
<input type="hidden" class="hidden" name="update_cfs" value="1" />

% if ($object->id) {
<h2><&|/l&>Global Custom Fields</&></h2>
<& PickCustomFields, custom_fields => \@GlobalCFs, read_only => 1, id => $id, sub_type => $sub_type &>
% }
<h2><&|/l&>Selected Custom Fields</&></h2>
<& PickCustomFields, custom_fields => [$objectCFs->custom_fields], id => $id, checked => 1, sub_type => $sub_type &>
<h2><&|/l&>Unselected Custom Fields</&></h2>
<& PickCustomFields, custom_fields => \@UnassignedCFs, id => $id, sub_type => $sub_type &>

<& /Elements/Submit, check_all => 1, clear_all => 1 &>
</form>


<%INIT>
my $CustomFields = RT::Model::CustomFieldCollection->new( current_user => Jifty->web->current_user );
my @results;
my (@GlobalCFs, @UnassignedCFs);

my $id = $object->id || '';
if ($id and !$object->current_user_has_right('AssignCustomFields')) {
    $m->out('<p><i>', _('(No custom fields)'), '</i></p>');
    return;
}

my $lookup = $object_type;
$lookup .= "-$sub_type" if $sub_type;

$CustomFields->limit_to_lookup_type($lookup);
$CustomFields->order_by( column => 'name' );


my ($GlobalCFs, $objectCFs);
$objectCFs = RT::Model::ObjectCustomFieldCollection->new( current_user => Jifty->web->current_user );
$objectCFs->find_all_rows;
$objectCFs->limit_to_object_id($id);
$objectCFs->limit_to_lookup_type($lookup);

# Check sanity of sort_orders
my %sort_orders;
$sort_orders{ $_->sort_order }++
  while ($_ = $objectCFs->next);

# If there are duplicates, run though and squash them
if (grep $_ > 1, values %sort_orders) {
    my $i = 1;
    while ( my $objectCF = $objectCFs->next ) {
        $objectCF->set_sort_order( $i++ );
    }
    $objectCFs->goto_first_item;
}

# {{{ deal with moving sort_order of custom fields
if ($custom_field and $move) {
    my $SourceObj = RT::Model::ObjectCustomField->new( current_user => Jifty->web->current_user );
    $SourceObj->load_by_cols( object_id => $id, custom_field => $custom_field );

    my $targetObj;
    my $target_order = $SourceObj->sort_order + $move;
    while (my $objectCF = $objectCFs->next) { 
	my $this_order = $objectCF->sort_order;

	# if we have an exact match, finish the loop now
	($targetObj = $objectCF, last) if $this_order == $target_order;

	# otherwise, we need to apropos toward the general direction
	# ... first, check the sign is correct
	next unless ($this_order - $SourceObj->sort_order) * $move > 0;

	# ... next, see if we already have a candidate
	if ($targetObj) {
	    # ... if yes, compare the delta and choose the smaller one
	    my $orig_delta = abs($targetObj->sort_order - $target_order);
	    my $this_delta = abs($this_order - $target_order);
	    next if $orig_delta < $this_delta;
	}

	$targetObj = $objectCF;
    }

    if ($targetObj) {
	# swap their sort order
	my ($s, $t) = ($SourceObj->sort_order, $targetObj->sort_order);
	$targetObj->set_sort_order($s);
	$SourceObj->set_sort_order($t);
	# because order changed, we must redo search for subsequent uses
    }

    $objectCFs->goto_first_item;
}
# }}}

if ($id) {
    $GlobalCFs = RT::Model::ObjectCustomFieldCollection->new( current_user => Jifty->web->current_user );
    $GlobalCFs->limit_to_object_id(0);
    $GlobalCFs->limit_to_lookup_type($lookup);
}

while (my $cf = $CustomFields->next) { 
    my $cf_id = $cf->id;

    if ($GlobalCFs and $GlobalCFs->has_entry_for_custom_field($cf_id)) {
	push @GlobalCFs, $cf;
	next;
    }

    if ($update_cfs) {
	# Go through and delete all the custom field relationships that this object
	# no longer has
	my $key = "object-$id-CF-$cf_id";
	if ($ARGS{$key}) {
	    if (!$objectCFs->has_entry_for_custom_field($cf_id)) {
		my ($val, $msg) = $cf->add_to_object($object);
		push (@results, $msg);
		push @UnassignedCFs, $cf if !$val;
	    }
	}
	else {
	    push @UnassignedCFs, $cf;
	    if ($objectCFs->has_entry_for_custom_field($cf_id)) {
		my ($val, $msg) = $cf->remove_from_object($object);
		push (@results, $msg);
		pop @UnassignedCFs if !$val;
	    }
	}
    }
    elsif (!$objectCFs->has_entry_for_custom_field($cf_id)) {
	push @UnassignedCFs, $cf;
    }
        else {
        }
}

# redo search...
$objectCFs = RT::Model::ObjectCustomFieldCollection->new( current_user => Jifty->web->current_user );
$objectCFs->find_all_rows;
$objectCFs->limit_to_object_id($id);
$objectCFs->limit_to_lookup_type($lookup);

</%INIT>
<%ARGS>
$title => undef
$move => undef
$source => undef
$custom_field => undef
$find_disabled_custom_fields => undef
$update_cfs => 0
$object
$object_type
$sub_type => ''
</%ARGS>
